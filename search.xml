<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java学习笔记（三）</title>
      <link href="/2025/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2025/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记三"><a class="markdownIt-Anchor" href="#java学习笔记三"></a> Java学习笔记（三）</h1><h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><h3 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h3><p>算术运算符是对数值类型的变量进行运算的（表略）</p><p><code>++的使用</code>：作为独立的语句使用；前<ins>和后</ins>都完全等价于i=i+1;作为表达式使用</p><ul><li>前++：++i先自增后赋值</li><li>后++：i++先赋值后自增</li></ul><p><em><strong>使用细节</strong></em>：</p><ol><li><p>对于除号&quot;/&quot;，它的整数除和小数除是有区别的：整数之间做除法时，只保留整<br />数部分而舍弃小数部分。例如：int x = 10 / 3，结果是3</p></li><li><blockquote><p>当对一个数取模时，可以等价<mark>a % b = a - a / b * b</mark>，这样我们可以看到取模的一<br />个本质运算。</p></blockquote></li><li><p>当自增当做一个独立语言使用时，不管是<ins>i；还是i</ins>；都是一样的，等价</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种情况</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//i-&gt;1</span></span><br><span class="line">i = i++; <span class="comment">//规则使用临时变量: (1) temp=i;(2) i=i+1;(3)i=temp;</span></span><br><span class="line">System.out.println(i); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i; <span class="comment">//规则使用临时变量: (1) i=i+1;(2) temp=i;(3)i=temp;</span></span><br><span class="line">System.out.println(i); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h3><ul><li>基本赋值运算符 =</li></ul><p>​eg：int a = 10;</p><ul><li>复合赋值运算符+= ，-= ，*= ， /= ，%= 等</li><li>a += b; [等价 a = a + b; ]</li><li>a -= b; [等价 a = a - b; ]</li></ul><p><em><strong>特点</strong></em>：</p><ol><li><p>运算顺序从右往左</p></li><li><p>赋值运算符的<em>左边 只能是变量</em>,右边 可以是变量、表达式、常量值</p></li></ol><ol start="3"><li>赋值运算符会进行类型转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复合赋值运算符会进行类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h3><p>又叫<code>比较运算符</code>,有==，&gt;= , &lt;= , != , &gt; , &lt;等</p><p><em><strong>使用细节</strong></em>：</p><ol><li><p>关系运算符的<mark>结果都是 boolean 型</mark>，也就是要么是 true，要么是 false</p></li><li><p>关系运算符组成的表达式，我们称为关系表达式</p></li><li><p>比较运算符&quot;==“不能误写成”=”</p></li></ol><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3><p>用于连接多个条件（多个关系表达式），最终的<mark>结果也是一个 boolean 值</mark></p><p><em><strong>运算规则</strong></em>：</p><ol><li>a&amp;b : &amp; 叫逻辑与，规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false</li><li>a&amp;&amp;b : &amp;&amp; 叫短路与，规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false</li><li>a|b : | 叫逻辑或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</li><li>a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</li><li>!a : 叫取反，或者非运算，规则：当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true</li><li>a^b: 叫逻辑异或，规则：当 a 和 b 不同时，则结果为 true, 否则为 false</li></ol><hr /><p><strong>&amp;&amp; 和 &amp; 使用区别</strong></p><ol><li>&amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</li><li>&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</li></ol><p><strong>|| 和 | 使用区别</strong></p><ol><li>||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高</li><li>| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低</li></ol><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3><p>java 中有 7 个位运算(&amp;、|、 ^ 、~、&gt;&gt;、&lt;&lt;和 &gt;&gt;&gt;)</p><p><em><strong>运算规则</strong></em></p><ol><li><p>按位与&amp;：两位全为1，结果为1，否则为0</p></li><li><p>按位或|：两位有一个为1，结果为1，否则为0</p></li><li><p>按位异或^：两位一个为0，一个为1，结果为1，否则为0</p></li><li><p>按位取反～：0-&gt;1,1-&gt;0</p></li></ol><blockquote><ol><li>算术右移 &gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位</li><li>算术左移 &lt;&lt;: 符号位不变,低位补 0</li><li>逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0</li><li>特别说明：没有 &lt;&lt;&lt; 符号</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0</span></span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>&lt;&lt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</span></span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 三元运算符</h3><p><mark>条件表达式 ? 表达式 1: 表达式 2</mark></p><p>运算规则：</p><ol><li>如果条件表达式为 true，运算后的结果是表达式 1；</li><li>如果条件表达式为 false，运算后的结果是表达式 2；</li></ol><p><code>表达式 1 和表达式 2 要为可以赋给接收变量的类型(或可以自动转换)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//表达式 1 和表达式 2 要为可以赋给接收变量的类型</span></span><br><span class="line"><span class="comment">//(或可以自动转换/或者强制转换)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? (<span class="type">int</span>)<span class="number">1.1</span> : (<span class="type">int</span>)<span class="number">3.4</span>;<span class="comment">//可以的,进行了强转</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> a &gt; b ? a : b + <span class="number">3</span>;<span class="comment">//可以的，满足 int -&gt; double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h2><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如下表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li></ol><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111116082.png" alt="image-20250911093504793" style="zoom:50%;" /><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h2><p>Java对各种变量、方法和类等<strong>命名时使用的字符序列</strong>称为标识符（凡是自己可以起名字的地方都叫标识符）</p><p><strong>命名规则</strong>：</p><ol><li><p><mark>由26个英文字母大小写，0-9，_或$组成</mark></p></li><li><p><strong>数字不可以开头</strong>。int  3ab = 1//错误</p></li><li><p><em>不可以使用关键字和保留字，但能包含关键字和保留字</em></p></li><li><p>Java中严格区分大小写，长度无限制</p></li><li><p>标识符不能包含空格</p></li></ol><p><strong>命名规范</strong></p><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc ，比如 com.hsp.crm</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰]</li></ol><p>​ 比如： TankShotGame</p><ol start="3"><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小</li></ol><p>​ 驼峰， 简称 驼峰法]，比如： tankShotGame</p><ol start="4"><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ol><p>​ 比如 ：定义一个所得税率 TAX_RATE</p><h2 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h2><p><code>定义</code>：被 Java 语言赋予了特殊含义，用做<strong>专门用途的字符串</strong>（单词）</p><p><code>特点</code>：关键字中所有字母都为小写</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111116820.png" alt="image-20250911094729178" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111117373.png" alt="image-20250911094830894" style="zoom: 50%;" /><h3 id="保留字"><a class="markdownIt-Anchor" href="#保留字"></a> 保留字</h3><p>Java 保留字：现有 Java 版本<strong>尚未使用</strong>，但<strong>以后版本可能会作为关键字使用</strong>。自己命名标识符时要避免使用这些保留</p><p>字 byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var 、 goto 、const</p><h2 id="键盘输入语句"><a class="markdownIt-Anchor" href="#键盘输入语句"></a> 键盘输入语句</h2><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。 需要一个 扫描器(对象), 就是<strong>Scanner</strong></p><p>**步骤 **：</p><ol><li>导入该类的所在包<code> java.util</code></li><li>创建该类对象（声明变量）</li><li>调用里面的功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//表示把 java.util 下的 Scanner 类导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="comment">//编写一个 main 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//演示接受用户的输入</span></span><br><span class="line">  <span class="comment">//步骤</span></span><br><span class="line">  <span class="comment">//Scanner 类 表示 简单文本扫描器，在 java.util 包</span></span><br><span class="line">  <span class="comment">//1. 引入/导入 Scanner 类所在的包</span></span><br><span class="line">  <span class="comment">//2. 创建 Scanner 对象 , new 创建一个对象</span></span><br><span class="line">  <span class="comment">//      myScanner 就是 Scanner 类的对象</span></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 接收用户输入了， 使用 相关的方法</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">  <span class="comment">//当程序执行到 next 方法时，会等待用户输入~~~ </span></span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入 int</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line">  <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入 double</span></span><br><span class="line">  System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;名字=&quot;</span> + name</span><br><span class="line">  + <span class="string">&quot; 年龄=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制"><a class="markdownIt-Anchor" href="#进制"></a> 进制</h2><p><strong>分类</strong>：</p><p>对于整数，有四种表示方式：</p><p>二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。</p><p>十进制：0-9 ，满 10 进 1。</p><p>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。</p><p>十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 <strong>0x</strong> <strong>或</strong> <strong>0X</strong> 开头表示。此处的 A-F 不区分大小写。</p><p><strong>二进制在运算中的说明</strong>：</p><ol><li><p>二进制是逢2进位的进位制，0、1是基本算符。</p></li><li><p>现代的电子计算机技术全部采用的是<mark>二进制</mark>，因为它只使用0、1两个数字符号，<br />非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制<br />数来表示的。二进制（Binary）数用0和1两个数字及其组合来表示任何数。进位<br />规则是”逢2进1”，数字1在不同的位上代表不同的值，按从右至左的次序，这个<br />值以二倍递增。</p></li></ol><ul><li>[x] <strong>原码、反码、补码</strong></li></ul><ol><li><p>二进制的最高位是符号位：0表示正数，1表示负数</p></li><li><p>正数的原码，反码，补码都一样（三码合一）</p></li><li><p>负数的反码=它的原码符号位不变，其它位取反（0-&gt;1，1-&gt;0）</p></li><li><p>负数的补码=它的反码+1，负数的反码=负数的补码-1</p></li><li><p>0的反码，补码都是0</p></li><li><p>java没有无符号数，换言之，java中的数都是有符号的</p></li><li><blockquote><p>[!warning]</p><p><strong>在计算机运算的时候，都是以<mark>补码</mark>的方式来运算的</strong></p></blockquote></li><li><blockquote><p>[!tip]</p><p>当我们看运算结果的时候，要看他的原码</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 识别不到git的解决方案</title>
      <link href="/2025/09/09/vscode%20%E8%AF%86%E5%88%AB%E4%B8%8D%E5%88%B0git%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2025/09/09/vscode%20%E8%AF%86%E5%88%AB%E4%B8%8D%E5%88%B0git%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-识别不到git的解决方案"><a class="markdownIt-Anchor" href="#vscode-识别不到git的解决方案"></a> vscode 识别不到git的解决方案</h1><h2 id="遇到问题"><a class="markdownIt-Anchor" href="#遇到问题"></a> 遇到问题</h2><p>当我第一次拿到Mac新机时，我先安装了git，在下载vs code后，发现vs code没有识别到git，弹出如下提示：</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707558.png" style="zoom:50%;" /><p>上网提到的原因如下：</p><ol><li><p>没有安装git</p><p><strong>解决方案</strong>：下载git</p></li><li><p>VS Code没有配置正确的git路径</p><p><strong>解决方案</strong>：设置中搜索<code>git.path</code>并手动指定Git可执行文件的正确路径，然后重启VS Code即可解决。</p></li></ol><p>然而在检测确认 Git 已经成功安装，并正确配置了vs code的git path后，依旧识别不到git，而在终端却可以使用git 命令</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707572.png" alt="image-20250909094509079" /></p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707584.png" alt="image-20250909094546967" /></p><h2 id="探索过程"><a class="markdownIt-Anchor" href="#探索过程"></a> 探索过程</h2><ol><li><p>猜测🤔是账号同步导致配置错误（<code>我的原电脑是windows，我怕同步配置会把win的vs code配置也配给了Mac的vs code</code>）</p></li><li><p>尝试删除vs code本地数据并卸载vs code，然后重装</p></li><li><p>尝试卸载Xcode并重装(感觉有些复杂放弃了)</p></li></ol><h2 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h2><p><strong>查看是否重复安装了git，导致异常出现</strong></p><p>可参考下文进行其中一个的git卸载：</p><p><a href="https://blog.csdn.net/qq_39052513/article/details/104637326">https://blog.csdn.net/qq_39052513/article/details/104637326</a></p><p>卸载完成后，重新加载vs code即可解决</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707594.png" alt="image-20250909095135162" /></p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫把星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（二）</title>
      <link href="/2025/09/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/09/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记二"><a class="markdownIt-Anchor" href="#java学习笔记二"></a> Java学习笔记（二）</h1><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><p><code>概念</code>：<strong>变量相当于内存中一个数据存储空间</strong>的表示，你可以把变量看做是一个房间的门牌号，通过<strong>门牌号</strong>我们可以找到房间，而通过变量名可以访问到变量(值)</p><ol><li><p>变量表示内存中的一个存储区域[<em>不同的变量，类型不同，占用的空间大小不同</em>，比如：int4个字节，double就是8个字节]</p></li><li><p>该区域有自己的名称[变量名]和类型[数据类型］</p></li><li><p>变量必须<mark>先声明，后使用</mark></p></li><li><p>该区域的数据/值可以在同一类型范围内不断变化</p></li><li><p>变量在同一个作用域内<mark>不能重名</mark></p></li><li><p>变量=变量名+值+数据类型</p></li></ol><p><code>“+”的使用</code>：</p><ul><li><p>当左右两边都是数值型时，则做加法运算</p></li><li><p>当左右两边有一方为字符串，则做拼接运算</p></li><li><p>运算顺序，是从左到右</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>):<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>):<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> +<span class="number">3</span>); <span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249840.png" alt="" /></p><h3 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte（字节）</td><td>1字节</td><td>-128~127</td></tr><tr><td>short（短整型）</td><td>2字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>int（整型）</td><td>4字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>long（长整型）</td><td>8字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr></tbody></table><p><em><strong>使用细节</strong></em></p><ol><li><blockquote><p>Java各整数类型<em>有固定的范围和字段长度</em>，不受具体os[操作系统]的影响，以<br />保证java程序的可移植性。</p></blockquote></li><li><p>Java的整型常量（具体值）默认为int型，声明long型常量须后加’l’或’L’</p></li><li><p>java程序中变量常声明为int型，除非不足以表示大数，才使用long</p></li><li><p>bit:计算机中的最小存储单位。byte：计算机中基本存储单元，1byte=8bit</p></li></ol><h3 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>float（单精度）</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double（双精度）</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p><em><strong>使用细节</strong></em></p><ol><li><p>Java的浮点型常量（具体值）默认为double型，声明float型常量，须后加‘f’或‘F’</p></li><li><p>浮点型常量有两种表示形式<br />十进制数形式：如：5.12512.of.512（必须有小数点）<br />科学计数法形式：如：5.12e2[5.12*10的2次方]5.12E-2[5.12/10的2次方]</p></li><li><p>通常情况下，应该使用double型，因为它比float型更精确。</p></li><li><blockquote><p>当我们对运算结果是小数的进行相等判断时，要小心，应该是以两个数的差值的绝对值，在某个精度范围类判断</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浮点数使用陷阱:2.7和8.1/3比较</span></span><br><span class="line"><span class="comment">//看看一段代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num11</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num12</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>; <span class="comment">//2.7</span></span><br><span class="line">System.out.println(num11);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num12);<span class="comment">//接近 2.7的一个小数，而不是 2.7</span></span><br><span class="line"><span class="comment">//得到一个重要的使用点：当我们对运算结果是小数的进行相等判断时，要小心</span></span><br><span class="line"><span class="comment">//应该是以两个数的差值的绝对值，在某个精度范围类判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//❌写法</span></span><br><span class="line"><span class="keyword">if</span>( num11 = num12) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//√写法</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Math.abs(num <span class="number">11</span> - num12);</span><br><span class="line"><span class="comment">//细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span><br></pre></td></tr></table></figure><h3 id="字符型"><a class="markdownIt-Anchor" href="#字符型"></a> 字符型</h3><p>字符类型可以表示单个字符,字符类型是 char(2字节,可以存放汉字)，表示多个字符用字符串 String</p><p><em><strong>使用细节</strong></em></p><ol><li><p>字符常量是用单引号（‘ ’）括起来的单个字符。例如：char c1=‘a’; char c2=‘中’; char c3=‘9’;</p></li><li><p>Java中还允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量。例如：char c3= '\n’</p></li><li><p>在Java中，<mark>char的本质是一个整数，在输出时，是unicode码对应的字符</mark><br /><a href="http://tool.chinaz.com/Tools/Unicode.aspx">查询网址:</a><a href="http://tool.chinaz.com/Tools/Unicode.aspx">http://tool.chinaz.com/Tools/Unicode.aspx</a></p></li><li><p>可以直接给char赋一个整数，然后输出时，会按照对应的unicode字符输出</p></li><li><p>char类型是<mark>可以进行运算的</mark>，相当于一个整数，因为它都对应有Unicode码</p></li></ol><p><em><strong>编码</strong></em></p><p>字符和码值的对应关系是通过字符编码表决定的（是规定好的）</p><ul><li>ASCII 码：一个字节表示，一共128个字符，实际上一个字节可以表示256个字符，只用128个</li></ul><p>​缺点：不能表示所有字符</p><ul><li><p>Unicode 编码</p><ol><li><p>Unicode的好处：一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独<br />一无二的编码，使用Unicode没有乱码的问题</p></li><li><p>Unicode的缺点：一个英文字母和一个汉字都占用2个字节，这对于<em>存储空间来说是浪费</em></p></li><li><p>2的16次方是65536，所以最多编码是65536个字符</p></li><li><p>编码0-127的字符是与ASCll的编码一样.比如’a’在ASClI码是0x61，在unicode码是<br />ox0061,都对应97。因此<mark>Unicode码兼容ASCll码</mark></p></li></ol></li><li><p>UTF-8 编码</p><ol><li><p>UTF-8是在互联网上使用最广的一种Unicode的实现方式（改进）</p></li><li><p>UTF-8是一种<mark>变长的编码方式</mark>。它可以使用1-6个字节表示一个符号，根据不<br />同的符号而变化字节长度。</p></li><li><p>使用大小可变的编码字母占1个字节，汉字占3个字节</p></li></ol></li><li><p>gbk（可以表示汉字，而且范围广，字母使用1个字节，汉字2个字节）</p></li><li><p>gb2312（可以表示汉字，gb2312&lt;gbk）</p></li><li><p>big5码（繁体中文，台湾，香港）</p></li></ul><h3 id="boolean布尔类型"><a class="markdownIt-Anchor" href="#boolean布尔类型"></a> boolean布尔类型</h3><ol><li><p>布尔类型也叫boolean类型，booolean类型数据<mark>只允许取值true和false</mark>，无<br />null，不可以赋值数值</p></li><li><p>boolean类型占1个字节</p></li><li><p>boolean类型适于逻辑运算，一般用于程序流程控制</p></li></ol><h2 id="java-api-文档"><a class="markdownIt-Anchor" href="#java-api-文档"></a> Java API 文档</h2><ol><li><p>API(Application Programming Interface,应用程序编程接口）是Java提供的基本编程接口<br />（java提供的类还有相关的方法）。中文在线文档：<a href="https://www.matools.com">https://www.matools.com</a></p></li><li><p>Java语言提供了大量的基础类，因此Oracle公司也为这些基础类提供了相应的API文档，用于告诉<br />开发者如何使用这些类，以及这些类里包含的方法。</p></li><li><p>Java类的组织形式</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249875.png" alt="PixPin_2025-09-04_17-40-48" /></p><h2 id="基本数据类型转换"><a class="markdownIt-Anchor" href="#基本数据类型转换"></a> 基本数据类型转换</h2><p><strong>自动类型转换</strong>：当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249915.png" alt="" /></p><p>​<strong>使用细节</strong>：</p><ol><li><p>有多种类型的数据混合运算时，系统<strong>首先自动将所有数据转换成容量最大的那种数据类型</strong>，然后</p><p>再进行计算</p></li><li><blockquote><p>当我们把精度（容量）大的数据类型购值给精度（容量）小的数据类型时，就会报错，反之就会进行自动类型转换</p></blockquote></li><li><blockquote><p>byte，short和char之间不会相互自动转换。</p></blockquote></li><li><p>byte，short，char他们三者可以计算，在<strong>计算时首先转换为int类型</strong></p></li><li><p><mark>boolean不参与转换</mark></p></li><li><blockquote><p>自动提升原则：表表达式结果的类型自动提升为为操作数中最大的类型</p></blockquote></li></ol><p><strong>强制类型转换</strong>：自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。使用时要加上强制转换符</p><p>( )，但可能造成 <strong>精度降低或溢出</strong></p><p>​<strong>使用细节</strong>：</p><ol><li>当进行数据的大小从大一一&gt;小，就需要使用到强制转换</li><li>强转符号<em>只针对于最近的操作数有效</em>，往往会使用小括号提升优先级</li><li>char类型可以保存int的<strong>常量值</strong>，但不能保存int的<strong>变量值</strong>，需要强转</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>:<span class="comment">//ok</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>:<span class="comment">//ok</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">//错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span>(<span class="type">char</span>)m; <span class="comment">//ok</span></span><br><span class="line">System.out.println(c3):<span class="comment">//100对应的字符</span></span><br></pre></td></tr></table></figure><p><strong>基本数据类型和 String 类型的转换</strong>：在程序开发中，我们经常需要将基本数据类型转成String类型或者将String类<br />型转成基本数据类型</p><p>​<strong>使用细节</strong>：</p><ol><li>基本类型转String类型<br />语法：将基本类型的值 + &quot;&quot;即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> n2 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> n3 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(str1 + <span class="string">&quot; &quot;</span> + str2 + <span class="string">&quot; &quot;</span> + str3 + <span class="string">&quot; &quot;</span> + str4);</span><br></pre></td></tr></table></figure><ol start="2"><li>string类型转基本数据类型<br />语法：通过基本类型的包装类调用parseXX方法即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;123.1&quot;</span>);</span><br><span class="line">Float.parseF1oat(<span class="string">&quot;123.45&quot;</span>);</span><br><span class="line">Short.parseShort(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">Long.parseLong(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">Byte.parseByte(<span class="string">&quot;12&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么把字符串转成字符 char -&gt; 含义是指 把字符串的第一个字符得到 </span></span><br><span class="line"><span class="comment">//解读 s5.charAt(0) 得到 s5 字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>在将 String 类型转成基本数据类型时，要<strong>确保 String 类型能够转成有效的数据</strong>，比如 我们可以把&quot;123&quot;，转成一个整数，但是不能把&quot;hello&quot;转成一个整数</li><li>如果格式不正确，就会<strong>抛出异常，程序就会终止</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（一）</title>
      <link href="/2025/08/31/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/08/31/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记一"><a class="markdownIt-Anchor" href="#java学习笔记一"></a> Java学习笔记（一）</h1><h2 id="常用dos命令"><a class="markdownIt-Anchor" href="#常用dos命令"></a> 常用DOS命令</h2><p><code>DOS</code> ：磁盘操作系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dir : 列出当前目录下的文件以及文件夹</span><br><span class="line">md : 创建目录</span><br><span class="line">rd : 删除目录</span><br><span class="line">cd : 进入指定目录</span><br><span class="line">cd.. : 退回到上一级目录</span><br><span class="line">cd\: 退回到根目录</span><br><span class="line">cd /d :切换盘符</span><br><span class="line">del : 删除文件</span><br><span class="line">tree: 查看指定目录下的所有子级目录</span><br><span class="line">exit : 退出 dos 命令行</span><br><span class="line">cls :清屏</span><br></pre></td></tr></table></figure><p>**相对路径：**从当前目录开始定位形成的一个路径</p><p>**绝对路径：**从顶级目录开始定位形成的一个路径</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202508311514502.png" style="zoom:50%;" /><p>eg:   需求：从abc\test100访问hello.txt</p><p>​相对路径：…\…\abc200\test200\hello.txt</p><p>​绝对路径：d:\abc200\test200\hello.txt</p><h2 id="第一个java程序"><a class="markdownIt-Anchor" href="#第一个java程序"></a> 第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">First_Program</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        system.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java重要特点"><a class="markdownIt-Anchor" href="#java重要特点"></a> Java重要特点</h2><ol><li><p>Java是面向对象的（<mark>oop</mark>）</p></li><li><p>Java语言是健壮的。Java的强类型机制、异常出路、垃圾的自动收集是Java程序健壮性的重要保证</p></li><li><p>Java语言是跨平台性的。[即：一个编译好的<code>.class</code>文件可以在多个系统下运行]</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509022255902.png" style="zoom:50%;" /></li><li><p>Java语言是解释型的</p></li></ol><p>​<code>解释型语言</code>：Java,Javascript,PHP<code>编译型语言</code>：c,c++</p><p>​<mark>区别</mark>：解释型语言 编译后的代码 ，不能直接被机器执行，需要<strong>解释器</strong>来执行，而编译型语言 编译后的代码，可以直接被机器执行</p><h2 id="jvmjava虚拟机"><a class="markdownIt-Anchor" href="#jvmjava虚拟机"></a> JVM（Java虚拟机）</h2><ol><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在JDK中</li><li>对于不同的平台，有不同的虚拟机</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ol><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509022256488.png" style="zoom: 67%;" /><h2 id="jdkjrejvm"><a class="markdownIt-Anchor" href="#jdkjrejvm"></a> JDK，JRE，JVM</h2><ol><li>JDK（Java开发工具包）= JRE + 开发工具集（java，javac等）</li><li>JRE（Java运行环境）=  JVM + Java的核心类库</li><li>编译：javac + 程序名称.java</li><li>运行：java + 程序名称（注意大小写）</li></ol><h2 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h2><ol><li><p>Java源文件以.java为扩展名。源文件的基本组成部分是类（class），编译后，<mark>每一个类，都对应一个.class</mark></p></li><li><p>Java应用程序的执行入口是main（）方法。它有固定的书写格式：<br />public static void main(String[] args) { … }</p></li><li><p>Java语言严格区分<mark>大小写</mark></p></li><li><p>Java方法由一条条语句构成，每个语句以“；”结束</p></li><li><p>大括号都是成对出现的，缺一不可【习惯，先写“{}”再写代码】</p></li><li><blockquote><p>如果源文件包含一个public类，则<mark>文件名必须按该类名命名</mark>！</p></blockquote></li><li><p>一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非<br />public类中，然后指定运行非public类，这样入口方法就是非public的main方法</p></li></ol><h2 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符"></a> 转义字符</h2><ul><li>在控制台，输入tab键，可以实现命令补全</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>\t</td><td>一个制表位，实现对齐的功能</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\\</td><td>一个\</td></tr><tr><td>\&quot;</td><td>一个“</td></tr><tr><td>\’</td><td>一个‘</td></tr><tr><td>\r</td><td>一个回车</td></tr></tbody></table><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><ul><li><strong>单行注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">helloworld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;         <span class="comment">//这个是程序入口</span></span><br><span class="line">        <span class="comment">//args（arguments）参数名字，可以改变</span></span><br><span class="line">        <span class="comment">//括号里面可以写成 String args[] 但是比较少见</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello, world!&quot;</span>);        <span class="comment">//下一语句输出到控制台，先输出后换行</span></span><br><span class="line">        System.out.print(<span class="string">&quot;hello, world!&quot;</span>);        <span class="comment">//这句话不换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>多行注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释不可以嵌套使用</span></span><br><span class="line"><span class="comment">这里是多行注释</span></span><br><span class="line"><span class="comment">这里也是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>文档注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 指定java程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment"> 这里可以写中文</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>单行注释 &amp; 多行注释</strong>：</p><p>1．作用：<br />1．增强可读性<br />2.方便调试<br />2.特点：不参与编译。</p></blockquote><blockquote><p><strong>文档注释</strong>：</p><p>1．内容可以被javadoc 解析，生成一套以网页文件形式体现的该程序的说明文档。<br />2.使用方法：<code>javadoc  -d  mydoc（文件名）-author  -version  Helloworld.java（文件名）-     encoding utf-8</code><br />3．只有文档注释可以被javadoc 读取，单行注释和多行注释不行</p></blockquote><h2 id="java代码规范"><a class="markdownIt-Anchor" href="#java代码规范"></a> Java代码规范</h2><ol><li><p>类、方法的注释，要以<mark>javadoc</mark>的方式来写</p></li><li><p>非JavaDoc的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，<br />如何修改，注意什么问题等</p></li><li><p>使用<code>tab</code>操作，实现缩进，默认整体向右边移动，时候用<code>shift+tab</code>整体向左移</p></li><li><p>运算符和=两边习惯性各加-个空格。比如：2 + 4 * 5 + 345 - 89</p></li><li><p>源文件使用<mark>utf-8编码</mark></p></li><li><p>行宽度不要超过80字符</p></li><li><p>代码编写<mark>次行风格</mark>和<mark>行尾风格</mark></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2025/08/12/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/08/12/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown-常见语法"><a class="markdownIt-Anchor" href="#markdown-常见语法"></a> Markdown 常见语法</h1><h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h2><p>Markdown 使用 # 符号来表示标题，支持 <strong>六级标题</strong>， # 的数量代表标题的级别。</p><p>“ # ”——一级标题</p><p>” ## ”——二级标题</p><p>其他同理</p><h2 id="加粗"><a class="markdownIt-Anchor" href="#加粗"></a> 加粗</h2><p>“ ** ”括住要加粗的部分即可实现加粗</p><p>eg:  <strong>你好</strong></p><h2 id="高亮"><a class="markdownIt-Anchor" href="#高亮"></a> 高亮</h2><p>”==“括住要进行强调的部分即可实现高亮</p><p>eg: <mark>你好</mark></p><h2 id="斜体"><a class="markdownIt-Anchor" href="#斜体"></a> 斜体</h2><p>“ * ”括住要进行斜体的部分即可实现文本斜体。</p><p>eg: <em>哈哈哈</em></p><h2 id="中划线删除线"><a class="markdownIt-Anchor" href="#中划线删除线"></a> 中划线（删除线）</h2><p>” ~~ ”括住要中划的部分即可。</p><p>eg: <s>会魔法的麻瓜</s></p><h2 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h2><p>使用三个或更多的 - 、 * 或 _ 创建分隔线。</p><hr /><h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2><ul><li><p>无序列表</p><p>使用 - 、 * 或 + 作为标记符，通过“ * ”加空格实现，例如：</p><ul><li>富士康 i 哦物品</li></ul></li><li><p>有序列表</p></li></ul><p>​使用数字加点 . ，数字顺序可以不连续，最终会按顺序渲染。 例如：</p><pre><code>1.   哈哈哈2.   嘤嘤嘤    1. 呜呜呜</code></pre><blockquote><p>要结束一段列表，只需连续按 <mark>两次</mark> 回车键 。</p></blockquote><ul><li>打卡框</li></ul><p>使用“ * 【 】 ”来实现，如果要打勾，只需将方括号的空格换成 x(大小写不限)。</p><ul><li>[ ] 今日计划</li><li>[x] 练琴</li></ul><h2 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h2><ul><li>整段代码块</li></ul><p>段首及段尾用” ``` “即可, 例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行内代码块/注释</li></ul><p>将选中的内容用“ ` ”框起来即可。</p><p>eg:  跳舞的<code>梵谷</code></p><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><p>用” &gt; “放在被引用的内容的段首即可，例如：</p><blockquote><p>人间的青草地</p><p>​需要浇水</p><p>​内心的花园就</p><p>​不会枯萎~</p><p>​——方大同《每个人都会》</p></blockquote><p><strong><code>注释</code></strong>：要结束一段引用，只需连续按 <mark>两次</mark> 回车键 。引用可进行<mark>嵌套</mark>。</p><blockquote><p>窗外的麻雀 在电线杆上多嘴~</p><blockquote><pre><code>    ——jay chou《七里香》</code></pre></blockquote></blockquote><h2 id="超链接"><a class="markdownIt-Anchor" href="#超链接"></a> 超链接</h2><p>将选中的文本用” [] “ 括起来，并在后面用” ()“ 标明跳转地址。</p><p>eg:  如果有问题，就找<a href="https://www.baidu.com">度娘</a>。</p><ul><li><mark>超链接标签复用</mark></li></ul><p>当某个标签重复作为超链接地址时，可用如下方式进行简化操作：</p><p>实现效果：<a href="https://www.baidu.com">百度</a>其实就是<a href="https://www.baidu.com">度娘</a></p><ul><li>注脚</li></ul><p>将选中的文本用“ [] ”框起来，在后面用“ [^] “标注注脚。</p><p>eg: 周[^ 1]杰伦[^ 2]</p><p>[^ 1]: jay chou<br />[^ 2]: 最喜博主爱的华语歌手</p><h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2><p>添加图片与链接类似，只需在前面加一个 ! 。这里的图片可以是本地，也可以是网络（图床） 。</p><p><img src="" alt="" /></p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/%E6%B5%B7%E8%BE%B9%E7%9A%84%E5%B0%91%E5%A5%B3.jpg" style="zoom: 67%;" /><h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2><p>使用 | 和 - 创建表格。 <mark>CTRL + enter</mark> 切换到下一数据行。</p><table><thead><tr><th style="text-align:center">表格</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">哈哈哈</td><td style="text-align:center">嘻嘻嘻</td></tr><tr><td style="text-align:center">嚯嚯嚯</td><td style="text-align:center">嘤嘤嘤</td></tr></tbody></table><h2 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h2><p>Typora 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</p><ul><li><code>行内公式</code>：用“ $ ”括起来</li><li><code>独立公式</code>：用‘’$$‘’括起来</li></ul><p><a href="https://www.cnblogs.com/Xuxiaokang/p/15654336.html#%E5%A6%82%E4%BD%95%E8%BE%93%E5%85%A5%E4%B8%8A%E4%B8%8B%E6%A0%87">如何输入上下标</a>:</p><p><code>^</code> 表示上标, <code>_</code> 表示下标。如果上下标的内容多于一个字符，需要用 <code>&#123;&#125;</code> 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/11/hello-world/"/>
      <url>/2025/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<hr /><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
