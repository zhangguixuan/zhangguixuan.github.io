<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java学习笔记（六）</title>
      <link href="/2025/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2025/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记六"><a class="markdownIt-Anchor" href="#java学习笔记六"></a> Java学习笔记（六）</h1><h2 id="类与对象"><a class="markdownIt-Anchor" href="#类与对象"></a> 类与对象</h2><p><strong>引入原因</strong>：</p><ol><li><p>使用<em>单独变量</em>难以进行数据管理</p></li><li><p>使用<em>数组</em>:</p><p>(1)数据类型体现不出来(2) 只能通过[下标]获取信息，造成变量名字和内容的对应关系不明确(3) 不能体现行为</p></li></ol><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>类是一个<mark>引用数据类型</mark>，包括<strong>属性</strong>（全局变量）和<strong>行为</strong>（方法等）两部分。用于方便对一个整体的相互关联的数据进行管理</p><p>对象是类的一个具体实例，可以简单理解为类是一个自定义的数据类型，对象是用该数据类型定义的一个变量。</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509272153726.png" style="zoom:50%;" /><p><strong>类和对象的区别和联系</strong>:</p><ol><li>类是抽象的，概念的，代表一类事物,比如人类,猫类…, 即它是数据类型</li><li>对象是具体的，实际的，代表一个具体事物, 即 是实例</li><li>类是对象的模板，对象是类的一个个体，对应一个实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  String name;<span class="comment">//属性, 成员变量, 字段 field</span></span><br><span class="line">  <span class="type">double</span> price;</span><br><span class="line">  String color;</span><br><span class="line">  String[] master;<span class="comment">//属性可以是基本数据类型，也可以是引用类型(对象，数组)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何创建对象"><a class="markdownIt-Anchor" href="#如何创建对象"></a> 如何创建对象</h3><ol><li>先声明再创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat cat ; <span class="comment">//声明对象 cat</span></span><br><span class="line">cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">//创建</span></span><br></pre></td></tr></table></figure><ol start="2"><li>直接创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><h2 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h2><ol><li>成员变量 = 属性 = field(字段)</li></ol><ol start="2"><li>属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。比如前面定义猫类 的 int age 就是属性</li></ol><p><strong>使用细节</strong>：</p><blockquote><ol><li>属性的定义语法同变量，示例：访问修饰符  属性类型  属性名;</li></ol><p>访问修饰符： 控制属性的访问范围, 有四种访问修饰符 public, proctected, 默认, private ,后面我会详细介绍</p><ol start="2"><li>属性的定义类型可以为<mark>任意类型</mark>，包含基本类型或引用类型</li><li>属性如果不赋值，<mark>有默认值，规则和数组一致</mark></li></ol></blockquote><p><strong>如何访问属性</strong></p><p><code>对象名.属性名</code>:  <a href="http://cat.name">cat.name</a> ;</p><h2 id="类和对象的内存分配机制"><a class="markdownIt-Anchor" href="#类和对象的内存分配机制"></a> 类和对象的内存分配机制</h2><p><strong>Java 内存的结构分析</strong>:</p><ol><li>栈： 一般存放基本数据类型(局部变量)</li><li>堆： 存放对象(Cat cat , 数组等)</li><li>方法区：常量池(常量，比如字符串)， 类加载信息</li></ol><p><strong>对象在内存中存在形式(重要的)</strong>:</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509272158018.png" style="zoom: 50%;" /><p><strong>Java 创建对象的流程简单分析</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = “jack”;</span><br><span class="line">p.age = <span class="number">10</span></span><br></pre></td></tr></table></figure><ol><li>先加载 Person 类信息(属性和方法信息, 只会加载一次)</li><li>在堆中分配空间, 进行默认初始化(看规则)</li><li>把地址赋给 p , p 就指向对象</li><li>进行指定初始化， 比如 <a href="http://p.name">p.name</a> =”jack”     p.age = 10</li></ol><h2 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法</h2><p>在某些情况下，我们要需要定义成员方法(简称方法)</p><p>比如人类，除了有一些属性外( 年龄，姓名…),我们人类还有一些行为比如:可以说话、跑步…,通过学习，还可以做算术题。这时就要用<strong>成员方法</strong>才能完成</p><p><strong>方法调用流程</strong>：</p><blockquote><ol><li><p>当程序执行到方法时，就会开辟一个独立的空间（栈空间）</p></li><li><p>当方法执行完毕，或者执行到return语句时，就会返回</p></li><li><p>返回到调用方法的地方</p></li><li><p>返回后，继续执行方法后面的代码</p></li><li><p>当main方法（栈）执行完毕，整个程序退出</p></li></ol></blockquote><p><strong>成员方法的好处</strong></p><ol><li><mark>提高代码的复用性</mark></li><li>可以将实现的细节封装起来，然后供其他用户来调用即可</li></ol><h3 id="成员方法的定义"><a class="markdownIt-Anchor" href="#成员方法的定义"></a> 成员方法的定义</h3><p>访问修饰符 返回数据类型 方法名（形参列表…） {</p><p>​//方法体</p><p>​语句；</p><p>​return 返回值;</p><p>}</p><blockquote><ol><li>形参列表：表示成员方法输入</li><li>返回数据类型：表示成员方法输出, void 表示没有返回值</li><li>方法主体：表示为了实现某一功能代码块</li><li>return 语句不是必须的</li></ol></blockquote><p><strong>返回数据类型</strong></p><ol><li>一个方法<mark>最多有一个返回值</mark>[如何返回多个结果 ——用数组返回 ]</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回值类型必须和 return 的</li></ol><p>值类型一致或兼容</p><ol start="4"><li>如果方法是 void，则方法体中可以没有 return 语句，或者 只写 return</li></ol><p><strong>方法名</strong></p><p>遵循<strong>驼峰命名法</strong>，最好见名知义，表达出该功能的意思即可, 比如 得到两个数的和 getSum</p><p><strong>形参列表</strong></p><ol><li><p>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如getSum(int n1,int n2)</p></li><li><p>参数类型可以为任意类型，包含基本类型或引用类型，比如printArr(int[] map)</p></li><li><p>调用带参数的方法时，一定对应着参数列表传入<strong>相同类型或兼容类型</strong>的参数！</p></li><li><p>方法定义时的参数称为形式参数，简称形参；方法调用时的传入参数称为实际参数，简称实参，<br />实参和形参的类型<mark>要一致或兼容、个数、顺序必须一致</mark>！</p></li></ol><p><strong>方法体</strong><br />里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里<br />面不能再定义方法！即：<mark>方法不能嵌套定义</mark></p><p><strong>方法调用细节说明</strong></p><ol><li><p>同一个类中的方法调用：直接调用即可。比如print（参数);</p></li><li><p>跨类中的方法A类调用B类方法：需要通过对象名调用。比如<code>对象名.方法名(参数)</code></p></li><li><p>特别说明一下：跨类的方法调用和方法的访问修饰符相关</p></li></ol><h3 id="成员方法传参机制"><a class="markdownIt-Anchor" href="#成员方法传参机制"></a> 成员方法传参机制</h3><ul><li><p>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参！</p></li><li><p>引用类型传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参！</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以以这种方式来比较看p1和p2是否为同一个对象</span></span><br><span class="line">System.out.println(p1 == p2)</span><br></pre></td></tr></table></figure><h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2><p><strong>递归就是方法自己调用自己</strong>,每次调用时传入不同的变量.递归有助于编程者解决复杂问题,同时可以让代码变得简洁</p><ul><li>阶乘问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fibonacci数列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>( n &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;要求输入的 n&gt;=1 的整数&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>汉诺塔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tower</span> &#123;</span><br><span class="line">    <span class="comment">//num 表示要移动的个数, a, b, c 分别表示 A 塔，B 塔, C 塔</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> num , <span class="type">char</span> a, <span class="type">char</span> b ,<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="comment">//如果只有一个盘 num = 1</span></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果有多个盘，可以看成两个 , 最下面的和上面的所有盘(num-1)</span></span><br><span class="line">      <span class="comment">//(1)先移动上面所有的盘到 b, 借助 c</span></span><br><span class="line">      move(num - <span class="number">1</span> , a, c, b);</span><br><span class="line">      <span class="comment">//(2)把最下面的这个盘，移动到 c</span></span><br><span class="line">      System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">      <span class="comment">//(3)再把 b 塔的所有盘，移动到 c ,借助 a</span></span><br><span class="line">      move(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归重要规则</strong></p><ol><li><p>执行一个方法时，就<mark>创建一个新的受保护的独立空间（栈空间）</mark>，栈空间也层层销毁</p></li><li><p>方法的局部变量是独立的，不会相互影响，比如n变量</p></li><li><p>如果方法中使用的是<mark>引用类型变量（比如数组，对象），就会共享该引用类型的数据</mark></p></li><li><p>递归必须向退出递归的条件逼近(即<mark>找到基准条件</mark>，比如fibonacci数列就是前两个值为一)，否则就是无限递归，出现StackOverflowError</p></li><li><p>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕</p></li></ol><h2 id="方法重载overload"><a class="markdownIt-Anchor" href="#方法重载overload"></a> 方法重载(OverLoad)</h2><p>java 中允许同一个类中，多个同名方法的存在，但<strong>要求形参列表不一致</strong></p><p><strong>重载的好处</strong></p><ol><li>减轻了起名的麻烦</li><li>减轻了记名的麻烦</li></ol><p><strong>使用细节</strong></p><ol><li><p>方法名：必须相同</p></li><li><p>形参列表：必须不同（形参类型或个数或顺序，至少有一样不同，参数名无要求）</p></li><li><p>返回类型：无要求</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line">  <span class="comment">//下面的四个 calculate 方法构成了重载</span></span><br><span class="line">  <span class="comment">//两个整数的和</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//一个整数，一个 double 的和</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n1 + n2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//一个 double ,一个 Int 和</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//三个 int 的和</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2,<span class="type">int</span> n3)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2 + n2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h2><p>java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。就可以通过可变参数实现</p><p><strong>基本语法</strong></p><blockquote><p>访问修饰符 返回类型 方法名(数据类型 … 形参名) {</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. int... 表示接受的是可变参数，类型是 int ,即可以接收多个 int(0-多)</span></span><br><span class="line"><span class="comment">//2. 使用可变参数时，可以当做数组来使用 即 nums 可以当做数组</span></span><br><span class="line"><span class="comment">//3. 遍历 nums 求和即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">  <span class="comment">//System.out.println(&quot;接收的参数个数=&quot; + nums.length);</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      res += nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用细节</strong></p><ol><li><p>可变参数的实参可以为0个或任意多个</p></li><li><p><mark>可变参数的实参可以为数组</mark></p></li><li><blockquote><p>可变参数的本质就是数组</p></blockquote></li><li><blockquote><p>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</p></blockquote></li><li><p>一个形参列表中只能出现一个可变参数</p></li></ol><h2 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h2><p><strong>基本使用</strong></p><ol><li><p>在java编程中，主要的变量就是属性（成员变量）和局部变量。</p></li><li><p>我们说的局部变量一般是指在成员方法中定义的变量。</p></li><li><p>java中作用域的分类<br />全局变量：也就是属性，作用域为整个类体Cat类：cry、eat等方法使用属性<br />局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中！</p></li><li><p>全局变量（属性）可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，<br />才能使用，因为没有默认值。</p></li></ol><p><strong>注意事项</strong></p><ol><li><p>属性和局部变量可以重名，<mark>访问时遵循就近原则</mark></p></li><li><p>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名</p></li><li><p>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。局部变<br />量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁<br />即在一次方法调用过程中</p></li><li><p>作用域范围不同<br />全局变量/属性：可以被本类使用，或其他类使用（通过对象调用）<br />局部变量：只能在本类中对应的方法中使用</p></li><li><p>修饰符不同<br />全局变量/属性可以加修饰符<br />局部变量不可以加修饰符</p></li></ol><h2 id="构造方法构造器"><a class="markdownIt-Anchor" href="#构造方法构造器"></a> 构造方法/构造器</h2><p><strong>介绍</strong>：构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的<em>主要作用是完成对新对象的初始化</em>。它有几个特点：</p><ol><li>方法名和类名相同</li><li>没有返回值</li><li>在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</li></ol><p><strong>基本语法</strong></p><blockquote><p>修饰符  方法名 (形参列表) {</p><p>​方法体;</p><p>}</p></blockquote><p><strong>使用细节</strong></p><ol><li><p>一个类可以定义多个不同的构造器，即<mark>构造器重载</mark><br />比如：我们可以再给Person类定义一个构造器，用来创建对象的时候，只指定人名，不需要指定年龄</p></li><li><p><strong>构造器名和类名要相同</strong></p></li><li><p><mark>构造器没有返回值，也不能写void</mark></p></li><li><p><strong>构造器是完成对象的初始化，并不是创建对象</strong></p></li><li><p>在创建对象时，系统自动的调用该类的构造方法</p></li><li><blockquote><p>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器（也<br />叫默认构造器），比如Dog(){}，使用<code>javap</code>指令反编译看看</p></blockquote></li><li><p>一旦定义了自己的构造器，默认的构造器就覆盖了，就<strong>不能再使用默认的无<br />参构造器，除非显式的定义一下</strong>，即：Dog(){}写（这点很重要）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">//(String pName, int pAge) 是构造器形参列表，规则和成员方法一样</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造器被调用~~ 完成对象的属性初始化&quot;</span>);</span><br><span class="line">    name = pName;</span><br><span class="line">    age = pAge;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this关键字"><a class="markdownIt-Anchor" href="#this关键字"></a> this关键字</h2><p>Java虚拟机会给每个对象分配this，代表当前对象</p><ul><li>可以用来解决属性和局部变量重名而导致的异常问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">//构造器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//compareTo 比较方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">    <span class="comment">//名字和年龄完全一样</span></span><br><span class="line">    <span class="comment">// if(this.name.equals(p.name) &amp;&amp; this.age == p.age) &#123;</span></span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">// return false;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用细节</strong></p><ol><li><p>this 关键字可以用来访问本类的属性、方法、构造器</p></li><li><p>this 用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法：<code>this.方法名(参数列表);</code></p></li><li><p>访问构造器语法：<code>this(参数列表);</code> 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一条语句)</p></li><li><p>this 不能在类定义的外部使用，只能在类定义的方法中使用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（五）</title>
      <link href="/2025/09/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2025/09/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记五"><a class="markdownIt-Anchor" href="#java学习笔记五"></a> Java学习笔记（五）</h1><h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2><p>数组可以存放多个同一类型的数据。数组也是一种数据类型，是<mark>引用类型</mark></p><p><strong>定义数组</strong>：</p><p><code>数据类型 数组名[] = new 数据类型[大小]</code><br />int a[] = new int[5]；//创建了一个数组，名字a，存放5个int</p><p><strong>数组的引用（使用/访问/获取数组元素）</strong></p><p><code>数组名[下标/索引/index]</code></p><p>比如：你要访问a数组的第3个数—&gt;a[2]</p><p><mark>数组的下标从0开始</mark></p><h3 id="动态初始化"><a class="markdownIt-Anchor" href="#动态初始化"></a> 动态初始化</h3><ol><li>先声明数组</li></ol><p>语法: 数据类型 数组名[]; 也可以 数据类型[] 数组名;</p><ol start="2"><li>创建数组</li></ol><p>语法: 数组名=new 数据类型[大小];</p><h3 id="静态初始化"><a class="markdownIt-Anchor" href="#静态初始化"></a> 静态初始化</h3><p>语法：数据类型 数组名[]  =  {元素值, 元素值, ……}</p><p>int a[] = {2, 5, 6, 7, 8, 89, 90, 34, 56};</p><h3 id="使用细节"><a class="markdownIt-Anchor" href="#使用细节"></a> 使用细节</h3><ol><li>数组是多个<strong>相同类型数据的组合</strong>，实现对这些数据的统一管理</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用。</li><li>数组创建后，如果没有赋值，<mark>有默认值</mark></li></ol><table><thead><tr><th style="text-align:center">数据类型</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:center">int, short, byte, long</td><td>0</td></tr><tr><td style="text-align:center">float, double</td><td>0.0</td></tr><tr><td style="text-align:center">char</td><td>\u0000</td></tr><tr><td style="text-align:center">boolean</td><td>false</td></tr><tr><td style="text-align:center">String</td><td>null</td></tr></tbody></table><ol start="4"><li>使用数组的步骤： 1. 声明数组并开辟空间 2 给数组各个元素赋值 3 使用数组</li><li>数组的<strong>下标是从</strong> <strong>0</strong> <strong>开始的</strong>。</li><li>数组下标必须在指定范围内使用，否则报：下标越界异常，比如int [] arr=new int[5]; 则有效下标为 0-4</li><li>数组属引用类型，数组型数据是对象(object)</li></ol><h3 id="数组赋值机制"><a class="markdownIt-Anchor" href="#数组赋值机制"></a> 数组赋值机制</h3><ol><li>基本数据类型赋值，这个值就是具体的数据，而且相互不影响</li></ol><p>int n1 = 2; int n2 = n1;</p><ol start="2"><li>数组在默认情况下是<mark>引用传递，赋的值是地址</mark></li></ol><p>eg :  int[] arr1 = {1, 2, 3};</p><p>​int[] arr2 = arr1;</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509202241950.png" style="zoom: 50%;" /><p><code>注</code>：数组赋值后，原数组指向的空间被自动释放， 两数组指向同一块存储区域，所以一个数组改变，另一个数组随即也改变</p><h3 id="数组拷贝"><a class="markdownIt-Anchor" href="#数组拷贝"></a> 数组拷贝</h3><p>将数组的值拷贝到另一数组，两数组指向的存储空间不同，互不影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"><span class="comment">//创建一个新的数组 arr2,开辟新的数据空间</span></span><br><span class="line"><span class="comment">//大小 arr1.length;</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"><span class="comment">//遍历 arr1 ，把每个元素拷贝到 arr2 对应的元素位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组反转"><a class="markdownIt-Anchor" href="#数组反转"></a> 数组反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length; <span class="comment">//计算数组的长度</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    temp = arr[len - <span class="number">1</span> - i];<span class="comment">//保存</span></span><br><span class="line">    arr[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组扩容"><a class="markdownIt-Anchor" href="#数组扩容"></a> 数组扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//遍历 arr 数组，依次将 arr 的元素拷贝到 arrNew 数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arrNew[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr = arrNew;</span><br></pre></td></tr></table></figure><h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><ul><li><p>内部排序法：指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择</p><p>式排序法和插入式排序法)</p></li><li><p>外部排序法：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)</p></li></ul><h3 id="冒泡排序bubblesort"><a class="markdownIt-Anchor" href="#冒泡排序bubblesort"></a> 冒泡排序BubbleSort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">22</span>, <span class="number">24</span>, <span class="number">775</span>, <span class="number">5</span>, <span class="number">34</span>, <span class="number">76</span>&#125;;</span><br><span class="line">    <span class="comment">//第一层循环控制循环次数，每次排出一个最大值，长度为n的数组只需排n-1次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">      <span class="comment">//第二层循环控制比较次数，每排完一个数，下一轮即可少比较一次</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">          arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">          arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h2><ol><li>顺序查找</li><li>二分查找</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个字符串数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;白眉鹰王&quot;</span>, <span class="string">&quot;金毛狮王&quot;</span>, <span class="string">&quot;紫衫龙王&quot;</span>, <span class="string">&quot;青翼蝠王&quot;</span>&#125;;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line"><span class="comment">//遍历数组，逐一比较，如果有，则提示信息，并退出</span></span><br><span class="line"><span class="comment">//通过index的值来区分是否找到元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">  <span class="comment">//比较 字符串比较 equals, 如果要找到名字就是当前元素</span></span><br><span class="line">  <span class="keyword">if</span>(findName.equals(names[i])) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;恭喜你找到 &quot;</span> + findName);</span><br><span class="line">    System.out.println(<span class="string">&quot;下标为= &quot;</span> + i);</span><br><span class="line">    <span class="comment">//把 i 保存到 index</span></span><br><span class="line">    index = i;</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//退出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123; <span class="comment">//没有找到</span></span><br><span class="line">    System.out.println(<span class="string">&quot;sorry ,没有找到 &quot;</span> + findName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注</code>：字符串不能直接用“ == ”来比较 ，需要使用方法：<mark>str1.equals( str2 )</mark></p><h2 id="多维数组二维数组"><a class="markdownIt-Anchor" href="#多维数组二维数组"></a> 多维数组——二维数组</h2><p>理解：二维数组是以一维数组为元素的数组</p><h3 id="动态初始化-2"><a class="markdownIt-Anchor" href="#动态初始化-2"></a> 动态初始化</h3><ul><li>类型[][] 数组名 = new 类型[大小] [大小]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int arr[][] = new int[2][3];</span><br></pre></td></tr></table></figure><ul><li><p>先声明：类型 数组名[][];</p><p>再定义(开辟空间) 数组名 = new 类型[大小] [大小]</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[][]; <span class="comment">//声明二维数组</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//再开空间</span></span><br></pre></td></tr></table></figure><ul><li>动态创建列数（列数不等的二维数组）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 二维数组，一个有 3 个一维数组，但是每个一维数组还没有开数据空间</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">//遍历 arr 每个一维数组</span></span><br><span class="line">  <span class="comment">//给每个一维数组开空间 new</span></span><br><span class="line">  <span class="comment">//如果没有给一维数组 new ,那么 arr[i]就是 null</span></span><br><span class="line">  arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历 arr 数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;<span class="comment">//对每个一维数组遍历</span></span><br><span class="line">  System.out.print(arr[i][j] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509202241454.png" style="zoom: 50%;" /><h3 id="静态初始化-2"><a class="markdownIt-Anchor" href="#静态初始化-2"></a> 静态初始化</h3><p>定义 类型 数组名[][] = { {值 1,值 2…},{值 1,值 2…},{值 1,值 2…} }</p><p>eg：int[][] arr = { {1,1,1}, {8,8,9}, {100} };</p><p>解读</p><ol><li><p>定义了一个二维数组 arr</p></li><li><p>arr 有三个元素(每个元素都是一维数组)</p></li><li><p>第一个一维数组有 3 个元素 , 第二个一维数组有 3 个元素, 第三个一维数组有 1 个元素</p></li></ol><h3 id="使用细节-2"><a class="markdownIt-Anchor" href="#使用细节-2"></a> 使用细节</h3><ol><li><p>一维数组的声明方式有:<strong>int[]  x 或者 int  x[]</strong></p></li><li><p>二维数组的声明方式有:<strong>int[][] y</strong> <strong>或者</strong> <strong>int[] y[]</strong> <strong>或者</strong> <strong>int y[][]</strong></p></li><li><blockquote><p>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。</p></blockquote></li></ol><h2 id="字符串内容比较-equals-方法"><a class="markdownIt-Anchor" href="#字符串内容比较-equals-方法"></a> 字符串内容比较 equals() 方法</h2><ul><li><strong>作用</strong>：比较两个字符串的<strong>内容是否完全相同</strong>（区分大小写）</li><li><strong>返回值</strong>：<code>boolean</code>（<code>true</code> 表示内容相同，<code>false</code> 反之）</li><li>注意<ul><li>字符串是对象，不能直接用 <code>==</code> 比较内容（<code>==</code> 比较的是对象内存地址）</li><li>避免对 <code>null</code> 调用 <code>equals()</code>，否则会抛出 <code>NullPointerException</code>，可先判断非空或用 <code>Objects.equals()</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">System.out.println(s1.equals(s2));  <span class="comment">// true（内容相同）</span></span><br><span class="line">System.out.println(s1.equals(s3));  <span class="comment">// false（大小写不同）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为Java大佬的八十一难</title>
      <link href="/2025/09/18/%E6%88%90%E4%B8%BAJava%E5%A4%A7%E4%BD%AC%E7%9A%84%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/"/>
      <url>/2025/09/18/%E6%88%90%E4%B8%BAJava%E5%A4%A7%E4%BD%AC%E7%9A%84%E5%85%AB%E5%8D%81%E4%B8%80%E9%9A%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-java的的使用陷阱"><a class="markdownIt-Anchor" href="#1-java的的使用陷阱"></a> 1. Java的“+”的使用陷阱</h1><h2 id="遇到问题"><a class="markdownIt-Anchor" href="#遇到问题"></a> 遇到问题</h2><p>今日在用二维数组写一段关于打印杨辉三角的程序题时，当我完成并运行后，终端给我打印了一串与预期完全不相干的结果，以下是我原代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印杨辉三角</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1 1</span></span><br><span class="line"><span class="comment">// 1 2 1</span></span><br><span class="line"><span class="comment">// 1 3 3  1</span></span><br><span class="line"><span class="comment">// 1 4 6  4  1</span></span><br><span class="line"><span class="comment">// 1 5 10 10 5 1</span></span><br><span class="line"><span class="comment">//提示</span></span><br><span class="line"><span class="comment">//1.第一行有1个元素，第n行有n个元素</span></span><br><span class="line"><span class="comment">//2.每一行的第一个元素和最后一个元素都是1</span></span><br><span class="line"><span class="comment">//3.从第三行开始，对于非第一个元素和最后一个元素的元素的值，arr[i][j] = arr[i-1][j]+arr[i-1][j-1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YanghuiTriangle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组并赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">//为每个一维数组分配空间</span></span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;<span class="comment">//遍历每个一维数组进行赋值</span></span><br><span class="line">                <span class="comment">//如果是一维数组的第一个或最后一个元素，则赋值为1</span></span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span> || j == arr[i].length-<span class="number">1</span>)&#123;</span><br><span class="line">                    arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//否则按arr[i][j] = arr[i-1][j]+arr[i-1][j-1]进行赋值</span></span><br><span class="line">                    arr[i][j] = arr[i-<span class="number">1</span>][j]+arr[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组，打印杨辉三角</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j] + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看代码是不是好像没什么问题，但当时这结果可让我一头雾水：</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509182227584.png" alt="" /></p><p>这是预期结果：</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509182232419.png" alt="" /></p><h2 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h2><p>在反复核对老韩视频中的正确代码，只找出一处不同，即在打印杨辉三角过程中的制表符<code>\t</code>，我用的单引号引用，而老韩用的双引号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的源代码</span></span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确代码</span></span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br></pre></td></tr></table></figure><p>但当时却不以为然，因为我记得无论是双引号，还是单引号框起的<code>\t</code>都能发挥转义的功能。</p><p>但我忽略了一个重要的问题——<strong>当“+”连接的前后两个式子，只有其中一个是字符串的时候，才能实现<mark>拼接</mark>功能，否则会进行<mark>数值相加</mark></strong>，因为我的arr[i] [j]是int类型而非String，‘\t’是char类型，所以会进行数值相加，故输出的是arr[i] [j]和’\t’对应的数值相加的结果。因此这里只能使用&quot;\t&quot;来实现制表功能。</p><h2 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考🤔</h2><p>到这我的问题已经得到了解决，但我还是试着验证了下在没有“+”影响的条件下，单引号引用的转义字符是否能实现转义功能，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">//效果等于System.out.println();</span></span><br></pre></td></tr></table></figure><p>结果验证了我的想法是正确的，但为了避免这次问题的复现，以后<mark>在使用转义字符时还是建议使用双引号引用</mark>。</p><h2 id="小插曲"><a class="markdownIt-Anchor" href="#小插曲"></a> 小插曲</h2><p>我将代码发给某包（某AI）后，它先分析了一大堆给我展示了一段修改后的代码，结果话锋一转，推翻了自己，开始分析我代码的合理性👍👍（笑）</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509182353284.png" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫把星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（四）</title>
      <link href="/2025/09/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2025/09/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记四"><a class="markdownIt-Anchor" href="#java学习笔记四"></a> Java学习笔记（四）</h1><h2 id="程序流程控制介绍"><a class="markdownIt-Anchor" href="#程序流程控制介绍"></a> 程序流程控制介绍</h2><p><strong>决定程序是如何执行</strong></p><ul><li><strong>顺序控制</strong> :  程序从上到下逐行地执行，中间没有任何判断和跳转</li><li><strong>分支控制</strong></li><li><strong>循环控制</strong></li></ul><h2 id="if分支控制"><a class="markdownIt-Anchor" href="#if分支控制"></a> if分支控制</h2><ul><li>单分支    ———<code>if</code></li><li>双分支.   ———<code>if else</code></li><li>多分支    ———<code>if , else if , else复用</code></li></ul><p><strong>基本语法</strong></p><blockquote><p>if（条件表达式1）{</p><p>​执行代码块1；</p><p>}</p><p>else if（条件表达式2）{</p><p>​执行代码块2；</p><p>}</p><p>else{</p><p>​执行代码块n；</p><p>}</p></blockquote><p><strong>特别说明</strong>：（1）多分支可以没有else，如果所有的条件表达式都不成立，则一个<br />执行入口都没有（2）如果有else，如果所有的条件表达式都不成立，则默认执行<br />else代码块，<mark>只能有一个执行出口</mark></p><blockquote><p><strong>在一个分支结构中又完整的嵌套了另一个完整的分支结构</strong>，里面的分支的结构称为内层分支，外面的分支结构称为外层分支。尽量不要超过 3 层 （影响可读性）</p></blockquote><h2 id="switch分支控制"><a class="markdownIt-Anchor" href="#switch分支控制"></a> switch分支控制</h2><p><strong>基本语法</strong></p><blockquote><p>switch（表达式）{<br />case常量1：<br />语句块1；<br />break;//switch关键字，表示swtich分支</p><p>​case常量2；      //表达式对应一个值<br />​语句块2；  //case常量1：当表达式的值等于常量1，就执行语句块1<br />​break;//break：表示退出swtich</p><p>​……</p><p>​case 常量n;//如果和case常量1匹配，就执行语句块1，如果没有匹配，就继续匹配case常量2<br />​语句块n；  //如果一个都没有匹配上，执行default<br />​break;</p><p>​default:<br />​default语句块；<br />​break;</p></blockquote><p><strong>使用细节</strong></p><ol><li><p><mark>表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型</mark>，比如输入的是字符，而常量是int</p></li><li><blockquote><p>switch（表达式）中表达式的返回值必须是：（byte , short , int , char , enum[枚举] , String)</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> c=<span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">switch</span>(c)&#123;<span class="comment">//错误</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1.1</span>:<span class="comment">//错误</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ok3&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>case子句中的值必须是<mark>常量</mark>，而不能是变量</p></li><li><p><strong>default子句是可选的，当没有匹配的case时，执行default</strong></p></li><li><blockquote><p><mark>击穿现象</mark>：break语句用来在执行完一个case分支后使程序跳出switch语句块；<em>如果没有写break，程序会顺序执行到switch结尾，除非遇到break</em></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印该月份所属的季节。</span></span><br><span class="line"><span class="comment">//3,4,5 春季 6,7,8 夏季 9,10,11 秋季 12, 1, 2 冬季</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 创建 Scanner 对象， 接收用户输入</span></span><br><span class="line"><span class="comment">//2. 使用 int month 接收</span></span><br><span class="line"><span class="comment">//3. 使用 switch 来匹配 ,使用穿透来完成，比较简洁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhichWeather</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;输入月份&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">    <span class="keyword">switch</span>(month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;这是春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;这是夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;这是秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;这是冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的月份不对(1-12)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch 和 if 的比较</strong></p><ol><li>如果<strong>判断的具体数值不多</strong>，而且符合 byte、 short 、int、 char, enum[枚举], String 这 6 种类型。虽然两个语句都可</li></ol><p>以使用，建议使用 swtich 语句</p><ol start="2"><li>其他情况：<strong>对区间判断，对结果为 boolean 类型判断</strong>，使用 if，if 的使用范围更广</li></ol><hr /><h2 id="for循环控制"><a class="markdownIt-Anchor" href="#for循环控制"></a> for循环控制</h2><p><strong>基本语法</strong></p><blockquote><p>for（循环变量初始化 ; 循环条件 ; 循环变量迭代）{</p><p>​循环操作（可以多条语句）;</p><p>}</p></blockquote><p><strong>使用说明</strong></p><ol><li>循环条件是返回一个<mark>布尔值</mark>的表达式</li><li>for(;循环判断条件;) 中的初始化和变量迭代可以写到其它地方，但是<strong>两边的分号不能省略</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i &lt; <span class="number">10</span>;)&#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><em>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开</em></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>,j = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++, j++)</span><br></pre></td></tr></table></figure><h2 id="while循环控制"><a class="markdownIt-Anchor" href="#while循环控制"></a> while循环控制</h2><p><strong>基本语法</strong></p><blockquote><p>while(循环条件){</p><p>​循环体(语句);</p><p>​循环变量送代;</p><p>}</p></blockquote><p><strong>使用说明</strong></p><ol><li>循环条件是返回一个<mark>布尔值</mark>的表达式</li><li>while 循环是<strong>先判断再执行</strong>语句</li></ol><h2 id="do-while循环控制"><a class="markdownIt-Anchor" href="#do-while循环控制"></a> do while循环控制</h2><p><strong>基本语法</strong></p><blockquote><p>do{</p><p>​循环体(语句);</p><p>​循环变量迭代;</p><p>}while(循环条件);</p></blockquote><p><strong>使用说明</strong></p><ol><li>循环条件是返回一个<mark>布尔值</mark>的表达式</li><li>do…while 循环是<strong>先执行，再判断</strong>， 因此它<em>至少执行一次</em></li></ol><h2 id="多重循环控制"><a class="markdownIt-Anchor" href="#多重循环控制"></a> 多重循环控制</h2><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while 均可以作为外层循环和内层循环</li></ol><p>【建议一般使用两层，最多不要超过 3 层, 否则，代码的可读性很差】</p><ol start="2"><li>实质上，嵌套循环就是把内层循环当成外层循环的<strong>循环体</strong>。当只有内层循环的循环条件为 false 时，才会完全跳出内</li></ol><p>层循环，才可结束外层的当次循环，开始下一次的循环</p><ol start="3"><li>设外层循环次数为 m 次，内层为 n 次，则内层循环体实际上需要执行<mark>m*n</mark>次</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印空心金字塔（老韩完整思路）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stars</span> &#123;</span><br><span class="line"><span class="comment">//编写一个 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">/*  *</span></span><br><span class="line"><span class="comment">     * *</span></span><br><span class="line"><span class="comment">    *   *</span></span><br><span class="line"><span class="comment">   *     *</span></span><br><span class="line"><span class="comment">  *********</span></span><br><span class="line"><span class="comment">  思路分析</span></span><br><span class="line"><span class="comment">  化繁为简</span></span><br><span class="line"><span class="comment">  1. 先打印一个矩形</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment">  *****</span></span><br><span class="line"><span class="comment">  2. 打印半个金字塔</span></span><br><span class="line"><span class="comment">  * //第 1 层 有 1 个*</span></span><br><span class="line"><span class="comment">  ** //第 2 层 有 2 个*</span></span><br><span class="line"><span class="comment">  *** //第 3 层 有 3 个*</span></span><br><span class="line"><span class="comment">  **** //第 4 层 有 4 个*</span></span><br><span class="line"><span class="comment">  ***** //第 5 层 有 5 个*</span></span><br><span class="line"><span class="comment">  3. 打印整个金字塔</span></span><br><span class="line"><span class="comment">      * //第 1 层 有 1 个* 2 * 1 -1 有 4=(总层数-1)个空格</span></span><br><span class="line"><span class="comment">     *** //第 2 层 有 3 个* 2 * 2 -1 有 3=(总层数-2)个空格</span></span><br><span class="line"><span class="comment">    ***** //第 3 层 有 5 个* 2 * 3 -1 有 2=(总层数-3)个空格</span></span><br><span class="line"><span class="comment">   ******* //第 4 层 有 7 个* 2 * 4 -1 有 1=(总层数-4)个空格</span></span><br><span class="line"><span class="comment">  ********* //第 5 层 有 9 个* 2 * 5 -1 有 0=(总层数-5)个空格</span></span><br><span class="line"><span class="comment">  4. 打印空心的金字塔 [最难的]</span></span><br><span class="line"><span class="comment">      * //第 1 层 有 1 个* 当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">     * * //第 2 层 有 2 个* 当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">    *   * //第 3 层 有 2 个* 当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">   *     * //第 4 层 有 2 个* 当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">  ********* //第 5 层 有 9 个* 全部输出*</span></span><br><span class="line"><span class="comment">  先死后活</span></span><br><span class="line"><span class="comment">  5 层数做成变量 int totalLevel = 5;</span></span><br><span class="line"><span class="comment">  //小伙伴 技术到位，就可以很快的把代码写出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">totalLevel</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">//层数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= totalLevel; i++) &#123; <span class="comment">//i 表示层数</span></span><br><span class="line">      <span class="comment">//在输出*之前，还有输出 对应空格 = 总层数-当前层</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= totalLevel - i; k++ ) &#123;</span><br><span class="line">          System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//控制打印每层的*个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= <span class="number">2</span> * i - <span class="number">1</span>;j++) &#123;</span><br><span class="line">      <span class="comment">//当前行的第一个位置是*,最后一个位置也是*, 最后一层全部 *</span></span><br><span class="line">      <span class="keyword">if</span>(j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span> || i == totalLevel) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">//其他情况输出空格</span></span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每打印完一层的*后，就换行 println 本身会换行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><h2 id="跳转控制语句"><a class="markdownIt-Anchor" href="#跳转控制语句"></a> 跳转控制语句</h2><ul><li><strong>break</strong></li></ul><ol><li><p><strong>break</strong> <strong>语句用于终止某个语句块的执行</strong>，一般使用在 switch 或者循环[for , while , do-while]中</p></li><li><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p></li></ol><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509181703769.png" style="zoom: 67%;" /><blockquote><p>（1）break语句可以指定退出哪层<br />（2)   label1是标签，名字由程序员指定。<br />（3）break后指定到哪个label就退出到哪里<br />（4）在实际的开发中，老韩尽量不要使用标签，<br />（5）如果没有指定break，默认退出最近的循环体</p></blockquote><ul><li><strong>continue</strong></li></ul><ol><li><strong>continue</strong> <strong>语句用于结束本次循环</strong>，<strong>继续执行下一次循环</strong>。</li></ol><ol start="2"><li>continue 语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环 , 这个和前面的标签的</li></ol><p>使用的规则一样.</p><ul><li><strong>return</strong></li></ul><p><strong>return 用于方法，表示跳出所在的方法</strong>。<mark>如果 return 写在 main 方法，退出程序</mark></p><hr /><h1 id="mathrandom"><a class="markdownIt-Anchor" href="#mathrandom"></a> Math.random()</h1><p><code>Math.random()</code> 是 Java 中 <code>java.lang.Math</code> 类提供的一个静态方法，用于生成一个随机的双精度浮点数（<code>double</code> 类型）</p><p><strong>基本特性</strong>：</p><ul><li>返回值范围：<code>[0.0, 1.0)</code>，即大于等于 0.0 且小于 1.0 的随机数</li><li>每次调用都会生成一个新的随机值</li><li>无需创建 <code>Math</code> 类的实例，直接通过 <code>Math.random()</code> 调用</li><li>它是伪随机数生成器，基于固定的算法，并非真正的随机</li></ul><p><strong>常用场景：生成指定范围的随机数</strong></p><p>通过数学运算，可以将其转换为任意范围的随机数：</p><ul><li><strong>生成 [0, n) 范围内的整数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.random() * n);</span><br></pre></td></tr></table></figure><p>例如：<code>(int)(Math.random() * 10)</code> 生成 0~9 的随机整数</p><ul><li><strong>生成 [min, max) 范围内的整数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> min + (<span class="type">int</span>)(Math.random() * (max - min));</span><br></pre></td></tr></table></figure><p>例如：<code>2 + (int)(Math.random() * 8)</code> 生成 2~9 的随机整数</p><ul><li><strong>生成 [min, max] 范围内的整数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> min + (<span class="type">int</span>)(Math.random() * (max - min + <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>例如：<code>1 + (int)(Math.random() * 10)</code> 生成 1~10 的随机整数</p><hr /><h2 id="老韩的两个编程思想技巧"><a class="markdownIt-Anchor" href="#老韩的两个编程思想技巧"></a> 老韩的两个编程思想(技巧)</h2><ol><li><p><code>化繁为简</code> : 即将复杂的需求，<strong>拆解成简单的需求</strong>，逐步完成</p></li><li><p><code>先死后活</code> : 先考虑固定的值，然后转成可以灵活变化的值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（三）</title>
      <link href="/2025/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2025/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记三"><a class="markdownIt-Anchor" href="#java学习笔记三"></a> Java学习笔记（三）</h1><h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><h3 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h3><p>算术运算符是对数值类型的变量进行运算的（表略）</p><p><code>++的使用</code>：作为独立的语句使用；前<ins>和后</ins>都完全等价于i=i+1;作为表达式使用</p><ul><li>前++：++i先自增后赋值</li><li>后++：i++先赋值后自增</li></ul><p><em><strong>使用细节</strong></em>：</p><ol><li><p>对于除号&quot;/&quot;，它的整数除和小数除是有区别的：整数之间做除法时，只保留整<br />数部分而舍弃小数部分。例如：int x = 10 / 3，结果是3</p></li><li><blockquote><p>当对一个数取模时，可以等价<mark>a % b = a - a / b * b</mark>，这样我们可以看到取模的一<br />个本质运算。</p></blockquote></li><li><p>当自增当做一个独立语言使用时，不管是<ins>i；还是i</ins>；都是一样的，等价</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种情况</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//i-&gt;1</span></span><br><span class="line">i = i++; <span class="comment">//规则使用临时变量: (1) temp=i;(2) i=i+1;(3)i=temp;</span></span><br><span class="line">System.out.println(i); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i; <span class="comment">//规则使用临时变量: (1) i=i+1;(2) temp=i;(3)i=temp;</span></span><br><span class="line">System.out.println(i); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h3><ul><li>基本赋值运算符 =</li></ul><p>​eg：int a = 10;</p><ul><li>复合赋值运算符+= ，-= ，*= ， /= ，%= 等</li><li>a += b; [等价 a = a + b; ]</li><li>a -= b; [等价 a = a - b; ]</li></ul><p><em><strong>特点</strong></em>：</p><ol><li><p>运算顺序从右往左</p></li><li><p>赋值运算符的<em>左边 只能是变量</em>,右边 可以是变量、表达式、常量值</p></li></ol><ol start="3"><li>赋值运算符会进行类型转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复合赋值运算符会进行类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h3><p>又叫<code>比较运算符</code>,有==，&gt;= , &lt;= , != , &gt; , &lt;等</p><p><em><strong>使用细节</strong></em>：</p><ol><li><p>关系运算符的<mark>结果都是 boolean 型</mark>，也就是要么是 true，要么是 false</p></li><li><p>关系运算符组成的表达式，我们称为关系表达式</p></li><li><p>比较运算符&quot;==“不能误写成”=”</p></li></ol><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3><p>用于连接多个条件（多个关系表达式），最终的<mark>结果也是一个 boolean 值</mark></p><p><em><strong>运算规则</strong></em>：</p><ol><li>a&amp;b : &amp; 叫逻辑与，规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false</li><li>a&amp;&amp;b : &amp;&amp; 叫短路与，规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false</li><li>a|b : | 叫逻辑或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</li><li>a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</li><li>!a : 叫取反，或者非运算，规则：当 a 为 true, 则结果为 false, 当 a 为 false 是，结果为 true</li><li>a^b: 叫逻辑异或，规则：当 a 和 b 不同时，则结果为 true, 否则为 false</li></ol><hr /><p><strong>&amp;&amp; 和 &amp; 使用区别</strong></p><ol><li>&amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</li><li>&amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</li></ol><p><strong>|| 和 | 使用区别</strong></p><ol><li>||短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为 true，效率高</li><li>| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低</li></ol><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3><p>java 中有 7 个位运算(&amp;、|、 ^ 、~、&gt;&gt;、&lt;&lt;和 &gt;&gt;&gt;)</p><p><em><strong>运算规则</strong></em></p><ol><li><p>按位与&amp;：两位全为1，结果为1，否则为0</p></li><li><p>按位或|：两位有一个为1，结果为1，否则为0</p></li><li><p>按位异或^：两位一个为0，一个为1，结果为1，否则为0</p></li><li><p>按位取反～：0-&gt;1,1-&gt;0</p></li></ol><blockquote><ol><li>算术右移 &gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位</li><li>算术左移 &lt;&lt;: 符号位不变,低位补 0</li><li>逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补 0</li><li>特别说明：没有 &lt;&lt;&lt; 符号</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0</span></span><br><span class="line"><span class="type">int</span> c=<span class="number">1</span>&lt;&lt;<span class="number">2</span>; <span class="comment">//1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</span></span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 三元运算符</h3><p><mark>条件表达式 ? 表达式 1: 表达式 2</mark></p><p>运算规则：</p><ol><li>如果条件表达式为 true，运算后的结果是表达式 1；</li><li>如果条件表达式为 false，运算后的结果是表达式 2；</li></ol><p><code>表达式 1 和表达式 2 要为可以赋给接收变量的类型(或可以自动转换)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//表达式 1 和表达式 2 要为可以赋给接收变量的类型</span></span><br><span class="line"><span class="comment">//(或可以自动转换/或者强制转换)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? (<span class="type">int</span>)<span class="number">1.1</span> : (<span class="type">int</span>)<span class="number">3.4</span>;<span class="comment">//可以的,进行了强转</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> a &gt; b ? a : b + <span class="number">3</span>;<span class="comment">//可以的，满足 int -&gt; double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h2><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如下表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li></ol><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111116082.png" alt="image-20250911093504793" style="zoom:50%;" /><h2 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h2><p>Java对各种变量、方法和类等<strong>命名时使用的字符序列</strong>称为标识符（凡是自己可以起名字的地方都叫标识符）</p><p><strong>命名规则</strong>：</p><ol><li><p><mark>由26个英文字母大小写，0-9，_或$组成</mark></p></li><li><p><strong>数字不可以开头</strong>。int  3ab = 1//错误</p></li><li><p><em>不可以使用关键字和保留字，但能包含关键字和保留字</em></p></li><li><p>Java中严格区分大小写，长度无限制</p></li><li><p>标识符不能包含空格</p></li></ol><p><strong>命名规范</strong></p><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc ，比如 com.hsp.crm</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz [大驼峰]</li></ol><p>​比如： TankShotGame</p><ol start="3"><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz [小</li></ol><p>​驼峰， 简称 驼峰法]，比如： tankShotGame</p><ol start="4"><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ol><p>​比如 ：定义一个所得税率 TAX_RATE</p><h2 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h2><p><code>定义</code>：被 Java 语言赋予了特殊含义，用做<strong>专门用途的字符串</strong>（单词）</p><p><code>特点</code>：关键字中所有字母都为小写</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111116820.png" alt="image-20250911094729178" style="zoom: 50%;" /><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509111117373.png" alt="image-20250911094830894" style="zoom: 50%;" /><h3 id="保留字"><a class="markdownIt-Anchor" href="#保留字"></a> 保留字</h3><p>Java 保留字：现有 Java 版本<strong>尚未使用</strong>，但<strong>以后版本可能会作为关键字使用</strong>。自己命名标识符时要避免使用这些保留</p><p>字 byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var 、 goto 、const</p><h2 id="键盘输入语句"><a class="markdownIt-Anchor" href="#键盘输入语句"></a> 键盘输入语句</h2><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。 需要一个 扫描器(对象), 就是<strong>Scanner</strong></p><p>**步骤 **：</p><ol><li>导入该类的所在包<code> java.util</code></li><li>创建该类对象（声明变量）</li><li>调用里面的功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//表示把 java.util 下的 Scanner 类导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="comment">//编写一个 main 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//演示接受用户的输入</span></span><br><span class="line">  <span class="comment">//步骤</span></span><br><span class="line">  <span class="comment">//Scanner 类 表示 简单文本扫描器，在 java.util 包</span></span><br><span class="line">  <span class="comment">//1. 引入/导入 Scanner 类所在的包</span></span><br><span class="line">  <span class="comment">//2. 创建 Scanner 对象 , new 创建一个对象</span></span><br><span class="line">  <span class="comment">//      myScanner 就是 Scanner 类的对象</span></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 接收用户输入了， 使用 相关的方法</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">  <span class="comment">//当程序执行到 next 方法时，会等待用户输入~~~ </span></span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入 int</span></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line">  <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入 double</span></span><br><span class="line">  System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;名字=&quot;</span> + name</span><br><span class="line">  + <span class="string">&quot; 年龄=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制"><a class="markdownIt-Anchor" href="#进制"></a> 进制</h2><p><strong>分类</strong>：</p><p>对于整数，有四种表示方式：</p><p>二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。</p><p>十进制：0-9 ，满 10 进 1。</p><p>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。</p><p>十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 <strong>0x</strong> <strong>或</strong> <strong>0X</strong> 开头表示。此处的 A-F 不区分大小写。</p><p><strong>二进制在运算中的说明</strong>：</p><ol><li><p>二进制是逢2进位的进位制，0、1是基本算符。</p></li><li><p>现代的电子计算机技术全部采用的是<mark>二进制</mark>，因为它只使用0、1两个数字符号，<br />非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制<br />数来表示的。二进制（Binary）数用0和1两个数字及其组合来表示任何数。进位<br />规则是”逢2进1”，数字1在不同的位上代表不同的值，按从右至左的次序，这个<br />值以二倍递增。</p></li></ol><ul><li>[x] <strong>原码、反码、补码</strong></li></ul><ol><li><p>二进制的最高位是符号位：0表示正数，1表示负数</p></li><li><p>正数的原码，反码，补码都一样（三码合一）</p></li><li><p>负数的反码=它的原码符号位不变，其它位取反（0-&gt;1，1-&gt;0）</p></li><li><p>负数的补码=它的反码+1，负数的反码=负数的补码-1</p></li><li><p>0的反码，补码都是0</p></li><li><p>java没有无符号数，换言之，java中的数都是有符号的</p></li><li><blockquote><p>[!warning]</p><p><strong>在计算机运算的时候，都是以<mark>补码</mark>的方式来运算的</strong></p></blockquote></li><li><blockquote><p>[!tip]</p><p>当我们看运算结果的时候，要看他的原码</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 识别不到git的解决方案</title>
      <link href="/2025/09/09/vscode%20%E8%AF%86%E5%88%AB%E4%B8%8D%E5%88%B0git%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2025/09/09/vscode%20%E8%AF%86%E5%88%AB%E4%B8%8D%E5%88%B0git%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-识别不到git的解决方案"><a class="markdownIt-Anchor" href="#vscode-识别不到git的解决方案"></a> vscode 识别不到git的解决方案</h1><h2 id="遇到问题"><a class="markdownIt-Anchor" href="#遇到问题"></a> 遇到问题</h2><p>当我第一次拿到Mac新机时，我先安装了git，在下载vs code后，发现vs code没有识别到git，弹出如下提示：</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707558.png" style="zoom:50%;" /><p>上网提到的原因如下：</p><ol><li><p>没有安装git</p><p><strong>解决方案</strong>：下载git</p></li><li><p>VS Code没有配置正确的git路径</p><p><strong>解决方案</strong>：设置中搜索<code>git.path</code>并手动指定Git可执行文件的正确路径，然后重启VS Code即可解决。</p></li></ol><p>然而在检测确认 Git 已经成功安装，并正确配置了vs code的git path后，依旧识别不到git，而在终端却可以使用git 命令</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707572.png" alt="image-20250909094509079" /></p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707584.png" alt="image-20250909094546967" /></p><h2 id="探索过程"><a class="markdownIt-Anchor" href="#探索过程"></a> 探索过程</h2><ol><li><p>猜测🤔是账号同步导致配置错误（<code>我的原电脑是windows，我怕同步配置会把win的vs code配置也配给了Mac的vs code</code>）</p></li><li><p>尝试删除vs code本地数据并卸载vs code，然后重装</p></li><li><p>尝试卸载Xcode并重装(感觉有些复杂放弃了)</p></li></ol><h2 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h2><p><strong>查看是否重复安装了git，导致异常出现</strong></p><p>可参考下文进行其中一个的git卸载：</p><p><a href="https://blog.csdn.net/qq_39052513/article/details/104637326">https://blog.csdn.net/qq_39052513/article/details/104637326</a></p><p>卸载完成后，重新加载vs code即可解决</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509101707594.png" alt="image-20250909095135162" /></p>]]></content>
      
      
      <categories>
          
          <category> 技术博文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扫把星 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（二）</title>
      <link href="/2025/09/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/09/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记二"><a class="markdownIt-Anchor" href="#java学习笔记二"></a> Java学习笔记（二）</h1><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><p><code>概念</code>：<strong>变量相当于内存中一个数据存储空间</strong>的表示，你可以把变量看做是一个房间的门牌号，通过<strong>门牌号</strong>我们可以找到房间，而通过变量名可以访问到变量(值)</p><ol><li><p>变量表示内存中的一个存储区域[<em>不同的变量，类型不同，占用的空间大小不同</em>，比如：int4个字节，double就是8个字节]</p></li><li><p>该区域有自己的名称[变量名]和类型[数据类型］</p></li><li><p>变量必须<mark>先声明，后使用</mark></p></li><li><p>该区域的数据/值可以在同一类型范围内不断变化</p></li><li><p>变量在同一个作用域内<mark>不能重名</mark></p></li><li><p>变量=变量名+值+数据类型</p></li></ol><p><code>“+”的使用</code>：</p><ul><li><p>当左右两边都是数值型时，则做加法运算</p></li><li><p>当左右两边有一方为字符串，则做拼接运算</p></li><li><p>运算顺序，是从左到右</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>):<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>):<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> +<span class="number">3</span>); <span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249840.png" alt="" /></p><h3 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte（字节）</td><td>1字节</td><td>-128~127</td></tr><tr><td>short（短整型）</td><td>2字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>int（整型）</td><td>4字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr><tr><td>long（长整型）</td><td>8字节</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></td></tr></tbody></table><p><em><strong>使用细节</strong></em></p><ol><li><blockquote><p>Java各整数类型<em>有固定的范围和字段长度</em>，不受具体os[操作系统]的影响，以<br />保证java程序的可移植性。</p></blockquote></li><li><p>Java的整型常量（具体值）默认为int型，声明long型常量须后加’l’或’L’</p></li><li><p>java程序中变量常声明为int型，除非不足以表示大数，才使用long</p></li><li><p>bit:计算机中的最小存储单位。byte：计算机中基本存储单元，1byte=8bit</p></li></ol><h3 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h3><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>float（单精度）</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double（双精度）</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p><em><strong>使用细节</strong></em></p><ol><li><p>Java的浮点型常量（具体值）默认为double型，声明float型常量，须后加‘f’或‘F’</p></li><li><p>浮点型常量有两种表示形式<br />十进制数形式：如：5.12512.of.512（必须有小数点）<br />科学计数法形式：如：5.12e2[5.12*10的2次方]5.12E-2[5.12/10的2次方]</p></li><li><p>通常情况下，应该使用double型，因为它比float型更精确。</p></li><li><blockquote><p>当我们对运算结果是小数的进行相等判断时，要小心，应该是以两个数的差值的绝对值，在某个精度范围类判断</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浮点数使用陷阱:2.7和8.1/3比较</span></span><br><span class="line"><span class="comment">//看看一段代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num11</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num12</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>; <span class="comment">//2.7</span></span><br><span class="line">System.out.println(num11);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num12);<span class="comment">//接近 2.7的一个小数，而不是 2.7</span></span><br><span class="line"><span class="comment">//得到一个重要的使用点：当我们对运算结果是小数的进行相等判断时，要小心</span></span><br><span class="line"><span class="comment">//应该是以两个数的差值的绝对值，在某个精度范围类判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//❌写法</span></span><br><span class="line"><span class="keyword">if</span>( num11 = num12) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//√写法</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Math.abs(num <span class="number">11</span> - num12);</span><br><span class="line"><span class="comment">//细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span><br></pre></td></tr></table></figure><h3 id="字符型"><a class="markdownIt-Anchor" href="#字符型"></a> 字符型</h3><p>字符类型可以表示单个字符,字符类型是 char(2字节,可以存放汉字)，表示多个字符用字符串 String</p><p><em><strong>使用细节</strong></em></p><ol><li><p>字符常量是用单引号（‘ ’）括起来的单个字符。例如：char c1=‘a’; char c2=‘中’; char c3=‘9’;</p></li><li><p>Java中还允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量。例如：char c3= '\n’</p></li><li><p>在Java中，<mark>char的本质是一个整数，在输出时，是unicode码对应的字符</mark><br /><a href="http://tool.chinaz.com/Tools/Unicode.aspx">查询网址:</a><a href="http://tool.chinaz.com/Tools/Unicode.aspx">http://tool.chinaz.com/Tools/Unicode.aspx</a></p></li><li><p>可以直接给char赋一个整数，然后输出时，会按照对应的unicode字符输出</p></li><li><p>char类型是<mark>可以进行运算的</mark>，相当于一个整数，因为它都对应有Unicode码</p></li></ol><p><em><strong>编码</strong></em></p><p>字符和码值的对应关系是通过字符编码表决定的（是规定好的）</p><ul><li>ASCII 码：一个字节表示，一共128个字符，实际上一个字节可以表示256个字符，只用128个</li></ul><p>​缺点：不能表示所有字符</p><ul><li><p>Unicode 编码</p><ol><li><p>Unicode的好处：一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独<br />一无二的编码，使用Unicode没有乱码的问题</p></li><li><p>Unicode的缺点：一个英文字母和一个汉字都占用2个字节，这对于<em>存储空间来说是浪费</em></p></li><li><p>2的16次方是65536，所以最多编码是65536个字符</p></li><li><p>编码0-127的字符是与ASCll的编码一样.比如’a’在ASClI码是0x61，在unicode码是<br />ox0061,都对应97。因此<mark>Unicode码兼容ASCll码</mark></p></li></ol></li><li><p>UTF-8 编码</p><ol><li><p>UTF-8是在互联网上使用最广的一种Unicode的实现方式（改进）</p></li><li><p>UTF-8是一种<mark>变长的编码方式</mark>。它可以使用1-6个字节表示一个符号，根据不<br />同的符号而变化字节长度。</p></li><li><p>使用大小可变的编码字母占1个字节，汉字占3个字节</p></li></ol></li><li><p>gbk（可以表示汉字，而且范围广，字母使用1个字节，汉字2个字节）</p></li><li><p>gb2312（可以表示汉字，gb2312&lt;gbk）</p></li><li><p>big5码（繁体中文，台湾，香港）</p></li></ul><h3 id="boolean布尔类型"><a class="markdownIt-Anchor" href="#boolean布尔类型"></a> boolean布尔类型</h3><ol><li><p>布尔类型也叫boolean类型，booolean类型数据<mark>只允许取值true和false</mark>，无<br />null，不可以赋值数值</p></li><li><p>boolean类型占1个字节</p></li><li><p>boolean类型适于逻辑运算，一般用于程序流程控制</p></li></ol><h2 id="java-api-文档"><a class="markdownIt-Anchor" href="#java-api-文档"></a> Java API 文档</h2><ol><li><p>API(Application Programming Interface,应用程序编程接口）是Java提供的基本编程接口<br />（java提供的类还有相关的方法）。中文在线文档：<a href="https://www.matools.com">https://www.matools.com</a></p></li><li><p>Java语言提供了大量的基础类，因此Oracle公司也为这些基础类提供了相应的API文档，用于告诉<br />开发者如何使用这些类，以及这些类里包含的方法。</p></li><li><p>Java类的组织形式</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249875.png" alt="PixPin_2025-09-04_17-40-48" /></p><h2 id="基本数据类型转换"><a class="markdownIt-Anchor" href="#基本数据类型转换"></a> 基本数据类型转换</h2><p><strong>自动类型转换</strong>：当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</p><p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509042249915.png" alt="" /></p><p>​<strong>使用细节</strong>：</p><ol><li><p>有多种类型的数据混合运算时，系统<strong>首先自动将所有数据转换成容量最大的那种数据类型</strong>，然后</p><p>再进行计算</p></li><li><blockquote><p>当我们把精度（容量）大的数据类型购值给精度（容量）小的数据类型时，就会报错，反之就会进行自动类型转换</p></blockquote></li><li><blockquote><p>byte，short和char之间不会相互自动转换。</p></blockquote></li><li><p>byte，short，char他们三者可以计算，在<strong>计算时首先转换为int类型</strong></p></li><li><p><mark>boolean不参与转换</mark></p></li><li><blockquote><p>自动提升原则：表表达式结果的类型自动提升为为操作数中最大的类型</p></blockquote></li></ol><p><strong>强制类型转换</strong>：自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。使用时要加上强制转换符</p><p>( )，但可能造成 <strong>精度降低或溢出</strong></p><p>​<strong>使用细节</strong>：</p><ol><li>当进行数据的大小从大一一&gt;小，就需要使用到强制转换</li><li>强转符号<em>只针对于最近的操作数有效</em>，往往会使用小括号提升优先级</li><li>char类型可以保存int的<strong>常量值</strong>，但不能保存int的<strong>变量值</strong>，需要强转</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>:<span class="comment">//ok</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>:<span class="comment">//ok</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">//错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span>(<span class="type">char</span>)m; <span class="comment">//ok</span></span><br><span class="line">System.out.println(c3):<span class="comment">//100对应的字符</span></span><br></pre></td></tr></table></figure><p><strong>基本数据类型和 String 类型的转换</strong>：在程序开发中，我们经常需要将基本数据类型转成String类型或者将String类<br />型转成基本数据类型</p><p>​<strong>使用细节</strong>：</p><ol><li>基本类型转String类型<br />语法：将基本类型的值 + &quot;&quot;即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> n2 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> n3 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(str1 + <span class="string">&quot; &quot;</span> + str2 + <span class="string">&quot; &quot;</span> + str3 + <span class="string">&quot; &quot;</span> + str4);</span><br></pre></td></tr></table></figure><ol start="2"><li>string类型转基本数据类型<br />语法：通过基本类型的包装类调用parseXX方法即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;123.1&quot;</span>);</span><br><span class="line">Float.parseF1oat(<span class="string">&quot;123.45&quot;</span>);</span><br><span class="line">Short.parseShort(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">Long.parseLong(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">Byte.parseByte(<span class="string">&quot;12&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么把字符串转成字符 char -&gt; 含义是指 把字符串的第一个字符得到 </span></span><br><span class="line"><span class="comment">//解读 s5.charAt(0) 得到 s5 字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><ol start="3"><li>在将 String 类型转成基本数据类型时，要<strong>确保 String 类型能够转成有效的数据</strong>，比如 我们可以把&quot;123&quot;，转成一个整数，但是不能把&quot;hello&quot;转成一个整数</li><li>如果格式不正确，就会<strong>抛出异常，程序就会终止</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（一）</title>
      <link href="/2025/08/31/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/08/31/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习笔记一"><a class="markdownIt-Anchor" href="#java学习笔记一"></a> Java学习笔记（一）</h1><h2 id="常用dos命令"><a class="markdownIt-Anchor" href="#常用dos命令"></a> 常用DOS命令</h2><p><code>DOS</code> ：磁盘操作系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dir : 列出当前目录下的文件以及文件夹</span><br><span class="line">md : 创建目录</span><br><span class="line">rd : 删除目录</span><br><span class="line">cd : 进入指定目录</span><br><span class="line">cd.. : 退回到上一级目录</span><br><span class="line">cd\: 退回到根目录</span><br><span class="line">cd /d :切换盘符</span><br><span class="line">del : 删除文件</span><br><span class="line">tree: 查看指定目录下的所有子级目录</span><br><span class="line">exit : 退出 dos 命令行</span><br><span class="line">cls :清屏</span><br></pre></td></tr></table></figure><p>**相对路径：**从当前目录开始定位形成的一个路径</p><p>**绝对路径：**从顶级目录开始定位形成的一个路径</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202508311514502.png" style="zoom:50%;" /><p>eg:   需求：从abc\test100访问hello.txt</p><p>​相对路径：…\…\abc200\test200\hello.txt</p><p>​绝对路径：d:\abc200\test200\hello.txt</p><h2 id="第一个java程序"><a class="markdownIt-Anchor" href="#第一个java程序"></a> 第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">First_Program</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        system.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java重要特点"><a class="markdownIt-Anchor" href="#java重要特点"></a> Java重要特点</h2><ol><li><p>Java是面向对象的（<mark>oop</mark>）</p></li><li><p>Java语言是健壮的。Java的强类型机制、异常出路、垃圾的自动收集是Java程序健壮性的重要保证</p></li><li><p>Java语言是跨平台性的。[即：一个编译好的<code>.class</code>文件可以在多个系统下运行]</p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509022255902.png" style="zoom:50%;" /></li><li><p>Java语言是解释型的</p></li></ol><p>​<code>解释型语言</code>：Java,Javascript,PHP<code>编译型语言</code>：c,c++</p><p>​<mark>区别</mark>：解释型语言 编译后的代码 ，不能直接被机器执行，需要<strong>解释器</strong>来执行，而编译型语言 编译后的代码，可以直接被机器执行</p><h2 id="jvmjava虚拟机"><a class="markdownIt-Anchor" href="#jvmjava虚拟机"></a> JVM（Java虚拟机）</h2><ol><li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在JDK中</li><li>对于不同的平台，有不同的虚拟机</li><li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ol><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/202509022256488.png" style="zoom: 67%;" /><h2 id="jdkjrejvm"><a class="markdownIt-Anchor" href="#jdkjrejvm"></a> JDK，JRE，JVM</h2><ol><li>JDK（Java开发工具包）= JRE + 开发工具集（java，javac等）</li><li>JRE（Java运行环境）=  JVM + Java的核心类库</li><li>编译：javac + 程序名称.java</li><li>运行：java + 程序名称（注意大小写）</li></ol><h2 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h2><ol><li><p>Java源文件以.java为扩展名。源文件的基本组成部分是类（class），编译后，<mark>每一个类，都对应一个.class</mark></p></li><li><p>Java应用程序的执行入口是main（）方法。它有固定的书写格式：<br />public static void main(String[] args) { … }</p></li><li><p>Java语言严格区分<mark>大小写</mark></p></li><li><p>Java方法由一条条语句构成，每个语句以“；”结束</p></li><li><p>大括号都是成对出现的，缺一不可【习惯，先写“{}”再写代码】</p></li><li><blockquote><p>如果源文件包含一个public类，则<mark>文件名必须按该类名命名</mark>！</p></blockquote></li><li><p>一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非<br />public类中，然后指定运行非public类，这样入口方法就是非public的main方法</p></li></ol><h2 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符"></a> 转义字符</h2><ul><li>在控制台，输入tab键，可以实现命令补全</li></ul><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>\t</td><td>一个制表位，实现对齐的功能</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\\</td><td>一个\</td></tr><tr><td>\&quot;</td><td>一个“</td></tr><tr><td>\’</td><td>一个‘</td></tr><tr><td>\r</td><td>一个回车</td></tr></tbody></table><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><ul><li><strong>单行注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">helloworld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;         <span class="comment">//这个是程序入口</span></span><br><span class="line">        <span class="comment">//args（arguments）参数名字，可以改变</span></span><br><span class="line">        <span class="comment">//括号里面可以写成 String args[] 但是比较少见</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello, world!&quot;</span>);        <span class="comment">//下一语句输出到控制台，先输出后换行</span></span><br><span class="line">        System.out.print(<span class="string">&quot;hello, world!&quot;</span>);        <span class="comment">//这句话不换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>多行注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释不可以嵌套使用</span></span><br><span class="line"><span class="comment">这里是多行注释</span></span><br><span class="line"><span class="comment">这里也是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>文档注释</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> 指定java程序的作者</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 指定源文件的版本</span></span><br><span class="line"><span class="comment"> 这里可以写中文</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>单行注释 &amp; 多行注释</strong>：</p><p>1．作用：<br />1．增强可读性<br />2.方便调试<br />2.特点：不参与编译。</p></blockquote><blockquote><p><strong>文档注释</strong>：</p><p>1．内容可以被javadoc 解析，生成一套以网页文件形式体现的该程序的说明文档。<br />2.使用方法：<code>javadoc  -d  mydoc（文件名）-author  -version  Helloworld.java（文件名）-     encoding utf-8</code><br />3．只有文档注释可以被javadoc 读取，单行注释和多行注释不行</p></blockquote><h2 id="java代码规范"><a class="markdownIt-Anchor" href="#java代码规范"></a> Java代码规范</h2><ol><li><p>类、方法的注释，要以<mark>javadoc</mark>的方式来写</p></li><li><p>非JavaDoc的注释，往往是给代码的维护者看的，着重告述读者为什么这样写，<br />如何修改，注意什么问题等</p></li><li><p>使用<code>tab</code>操作，实现缩进，默认整体向右边移动，时候用<code>shift+tab</code>整体向左移</p></li><li><p>运算符和=两边习惯性各加-个空格。比如：2 + 4 * 5 + 345 - 89</p></li><li><p>源文件使用<mark>utf-8编码</mark></p></li><li><p>行宽度不要超过80字符</p></li><li><p>代码编写<mark>次行风格</mark>和<mark>行尾风格</mark></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2025/08/12/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/08/12/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown-常见语法"><a class="markdownIt-Anchor" href="#markdown-常见语法"></a> Markdown 常见语法</h1><h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h2><p>Markdown 使用 # 符号来表示标题，支持 <strong>六级标题</strong>， # 的数量代表标题的级别。</p><p>“ # ”——一级标题</p><p>” ## ”——二级标题</p><p>其他同理</p><h2 id="加粗"><a class="markdownIt-Anchor" href="#加粗"></a> 加粗</h2><p>“ ** ”括住要加粗的部分即可实现加粗</p><p>eg:  <strong>你好</strong></p><h2 id="高亮"><a class="markdownIt-Anchor" href="#高亮"></a> 高亮</h2><p>”==“括住要进行强调的部分即可实现高亮</p><p>eg: <mark>你好</mark></p><h2 id="斜体"><a class="markdownIt-Anchor" href="#斜体"></a> 斜体</h2><p>“ * ”括住要进行斜体的部分即可实现文本斜体。</p><p>eg: <em>哈哈哈</em></p><h2 id="中划线删除线"><a class="markdownIt-Anchor" href="#中划线删除线"></a> 中划线（删除线）</h2><p>” ~~ ”括住要中划的部分即可。</p><p>eg: <s>会魔法的麻瓜</s></p><h2 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h2><p>使用三个或更多的 - 、 * 或 _ 创建分隔线。</p><hr /><h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2><ul><li><p>无序列表</p><p>使用 - 、 * 或 + 作为标记符，通过“ * ”加空格实现，例如：</p><ul><li>富士康 i 哦物品</li></ul></li><li><p>有序列表</p></li></ul><p>​使用数字加点 . ，数字顺序可以不连续，最终会按顺序渲染。 例如：</p><pre><code>1.   哈哈哈2.   嘤嘤嘤    1. 呜呜呜</code></pre><blockquote><p>要结束一段列表，只需连续按 <mark>两次</mark> 回车键 。</p></blockquote><ul><li>打卡框</li></ul><p>使用“ * 【 】 ”来实现，如果要打勾，只需将方括号的空格换成 x(大小写不限)。</p><ul><li>[ ] 今日计划</li><li>[x] 练琴</li></ul><h2 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h2><ul><li>整段代码块</li></ul><p>段首及段尾用” ``` “即可, 例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行内代码块/注释</li></ul><p>将选中的内容用“ ` ”框起来即可。</p><p>eg:  跳舞的<code>梵谷</code></p><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><p>用” &gt; “放在被引用的内容的段首即可，例如：</p><blockquote><p>人间的青草地</p><p>​需要浇水</p><p>​内心的花园就</p><p>​不会枯萎~</p><p>​——方大同《每个人都会》</p></blockquote><p><strong><code>注释</code></strong>：要结束一段引用，只需连续按 <mark>两次</mark> 回车键 。引用可进行<mark>嵌套</mark>。</p><blockquote><p>窗外的麻雀 在电线杆上多嘴~</p><blockquote><pre><code>    ——jay chou《七里香》</code></pre></blockquote></blockquote><h2 id="超链接"><a class="markdownIt-Anchor" href="#超链接"></a> 超链接</h2><p>将选中的文本用” [] “ 括起来，并在后面用” ()“ 标明跳转地址。</p><p>eg:  如果有问题，就找<a href="https://www.baidu.com">度娘</a>。</p><ul><li><mark>超链接标签复用</mark></li></ul><p>当某个标签重复作为超链接地址时，可用如下方式进行简化操作：</p><p>实现效果：<a href="https://www.baidu.com">百度</a>其实就是<a href="https://www.baidu.com">度娘</a></p><ul><li>注脚</li></ul><p>将选中的文本用“ [] ”框起来，在后面用“ [^] “标注注脚。</p><p>eg: 周[^ 1]杰伦[^ 2]</p><p>[^ 1]: jay chou<br />[^ 2]: 最喜博主爱的华语歌手</p><h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2><p>添加图片与链接类似，只需在前面加一个 ! 。这里的图片可以是本地，也可以是网络（图床） 。</p><p><img src="" alt="" /></p><img src="https://cdn.jsdelivr.net/gh/zhangguixuan/picgo-Image-hosting-service/img/%E6%B5%B7%E8%BE%B9%E7%9A%84%E5%B0%91%E5%A5%B3.jpg" style="zoom: 67%;" /><h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2><p>使用 | 和 - 创建表格。 <mark>CTRL + enter</mark> 切换到下一数据行。</p><table><thead><tr><th style="text-align:center">表格</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">哈哈哈</td><td style="text-align:center">嘻嘻嘻</td></tr><tr><td style="text-align:center">嚯嚯嚯</td><td style="text-align:center">嘤嘤嘤</td></tr></tbody></table><h2 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h2><p>Typora 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</p><ul><li><code>行内公式</code>：用“ $ ”括起来</li><li><code>独立公式</code>：用‘’$$‘’括起来</li></ul><p><a href="https://www.cnblogs.com/Xuxiaokang/p/15654336.html#%E5%A6%82%E4%BD%95%E8%BE%93%E5%85%A5%E4%B8%8A%E4%B8%8B%E6%A0%87">如何输入上下标</a>:</p><p><code>^</code> 表示上标, <code>_</code> 表示下标。如果上下标的内容多于一个字符，需要用 <code>&#123;&#125;</code> 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/11/hello-world/"/>
      <url>/2025/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<hr /><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
